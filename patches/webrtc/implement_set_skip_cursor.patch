From 7a6324463302b9f48891765c28f7631a9ee9f2c2 Mon Sep 17 00:00:00 2001
From: "aditya.k" <adityak368@gmail.com>
Date: Sat, 20 Mar 2021 10:18:31 +0100
Subject: [PATCH] feat: implement dynamic setSkipCursor feature

useful to skip the cursor capture within the stream while
the source is being shared
---
 modules/desktop_capture/desktop_and_cursor_composer.cc | 6 +++++-
 modules/desktop_capture/desktop_and_cursor_composer.h  | 2 ++
 modules/desktop_capture/desktop_capturer.cc            | 2 ++
 modules/desktop_capture/desktop_capturer.h             | 6 ++++++
 4 files changed, 15 insertions(+), 1 deletion(-)

diff --git a/modules/desktop_capture/desktop_and_cursor_composer.cc b/modules/desktop_capture/desktop_and_cursor_composer.cc
index f282c1d500..9568c01d6d 100644
--- a/modules/desktop_capture/desktop_and_cursor_composer.cc
+++ b/modules/desktop_capture/desktop_and_cursor_composer.cc
@@ -203,10 +203,14 @@ bool DesktopAndCursorComposer::IsOccluded(const DesktopVector& pos) {
   return desktop_capturer_->IsOccluded(pos);
 }
 
+void DesktopAndCursorComposer::SetSkipCursor(bool skip_cursor) {
+  skip_cursor_ = skip_cursor;
+}
+
 void DesktopAndCursorComposer::OnCaptureResult(
     DesktopCapturer::Result result,
     std::unique_ptr<DesktopFrame> frame) {
-  if (frame && cursor_) {
+  if (frame && cursor_ && !skip_cursor_) {
     if (frame->rect().Contains(cursor_position_) &&
         !desktop_capturer_->IsOccluded(cursor_position_)) {
       DesktopVector relative_position =
diff --git a/modules/desktop_capture/desktop_and_cursor_composer.h b/modules/desktop_capture/desktop_and_cursor_composer.h
index 8f95721ec2..faf32c3a97 100644
--- a/modules/desktop_capture/desktop_and_cursor_composer.h
+++ b/modules/desktop_capture/desktop_and_cursor_composer.h
@@ -57,6 +57,7 @@ class RTC_EXPORT DesktopAndCursorComposer
   bool SelectSource(SourceId id) override;
   bool FocusOnSelectedSource() override;
   bool IsOccluded(const DesktopVector& pos) override;
+  void SetSkipCursor(bool skip_cursor) override;
 
   // MouseCursorMonitor::Callback interface.
   void OnMouseCursor(MouseCursor* cursor) override;
@@ -84,6 +85,7 @@ class RTC_EXPORT DesktopAndCursorComposer
   DesktopVector cursor_position_;
   DesktopRect previous_cursor_rect_;
   bool cursor_changed_ = false;
+  bool skip_cursor_ = false;
 
   RTC_DISALLOW_COPY_AND_ASSIGN(DesktopAndCursorComposer);
 };
diff --git a/modules/desktop_capture/desktop_capturer.cc b/modules/desktop_capture/desktop_capturer.cc
index 8d8bdd5835..05b1646d4a 100644
--- a/modules/desktop_capture/desktop_capturer.cc
+++ b/modules/desktop_capture/desktop_capturer.cc
@@ -50,6 +50,8 @@ bool DesktopCapturer::IsOccluded(const DesktopVector& pos) {
   return false;
 }
 
+void DesktopCapturer::SetSkipCursor(bool skip_cursor) {}
+
 // static
 std::unique_ptr<DesktopCapturer> DesktopCapturer::CreateWindowCapturer(
     const DesktopCaptureOptions& options) {
diff --git a/modules/desktop_capture/desktop_capturer.h b/modules/desktop_capture/desktop_capturer.h
index 64339c0ca6..ac011aeef1 100644
--- a/modules/desktop_capture/desktop_capturer.h
+++ b/modules/desktop_capture/desktop_capturer.h
@@ -127,6 +127,12 @@ class RTC_EXPORT DesktopCapturer {
   // The return value if |pos| is out of the scope of the source is undefined.
   virtual bool IsOccluded(const DesktopVector& pos);
 
+  // Useful to dynamically stop cursor capture in the stream.
+  // By default the cursor is captured.
+  // First argument is a deviceId so one can stop capturing
+  // the cursor for a specific streamed source.
+  virtual void SetSkipCursor(bool skip_cursor);
+
   // Creates a DesktopCapturer instance which targets to capture windows.
   static std::unique_ptr<DesktopCapturer> CreateWindowCapturer(
       const DesktopCaptureOptions& options);
-- 
2.22.0.windows.1

