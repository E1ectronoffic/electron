From 4730f77f43c648f6168db58897b4569326a75627 Mon Sep 17 00:00:00 2001
From: deepak1556 <hop2deep@gmail.com>
Date: Thu, 20 Sep 2018 17:45:59 -0700
Subject: frame_host_manager.patch


diff --git a/content/browser/frame_host/render_frame_host_manager.cc b/content/browser/frame_host/render_frame_host_manager.cc
index 872e4609c..7c9e90b10 100644
--- a/content/browser/frame_host/render_frame_host_manager.cc
+++ b/content/browser/frame_host/render_frame_host_manager.cc
@@ -1953,6 +1953,27 @@ bool RenderFrameHostManager::InitRenderView(
 scoped_refptr<SiteInstance>
 RenderFrameHostManager::GetSiteInstanceForNavigationRequest(
     const NavigationRequest& request) {
+  bool has_response_started =
+      (request.state() == NavigationRequest::RESPONSE_STARTED ||
+        request.state() == NavigationRequest::FAILED) &&
+      !speculative_render_frame_host_;
+  BrowserContext* browser_context =
+      delegate_->GetControllerForRenderManager().GetBrowserContext();
+  scoped_refptr<SiteInstance> candidate_site_instance =
+      GetCandidateSiteInstanceForNavigationRequest(request);
+
+  SiteInstance* client_custom_instance = nullptr;
+  GetContentClient()->browser()->OverrideSiteInstanceForNavigation(
+      render_frame_host_.get(), browser_context, request.common_params().url,
+      has_response_started, candidate_site_instance.get(),
+      &client_custom_instance);
+
+  return scoped_refptr<SiteInstance>(client_custom_instance ? client_custom_instance : candidate_site_instance);
+}
+
+scoped_refptr<SiteInstance>
+RenderFrameHostManager::GetCandidateSiteInstanceForNavigationRequest(
+    const NavigationRequest& request) {
   // First, check if the navigation can switch SiteInstances. If not, the
   // navigation should use the current SiteInstance.
   SiteInstance* current_site_instance = render_frame_host_->GetSiteInstance();
diff --git a/content/browser/frame_host/render_frame_host_manager.h b/content/browser/frame_host/render_frame_host_manager.h
index d8cf377f4..4391d1398 100644
--- a/content/browser/frame_host/render_frame_host_manager.h
+++ b/content/browser/frame_host/render_frame_host_manager.h
@@ -568,6 +568,15 @@ class CONTENT_EXPORT RenderFrameHostManager
       bool new_is_view_source_mode,
       bool is_failure) const;

+  // Returns the SiteInstance that should be used to host the navigation handled
+  // by |navigation_request|.
+  // Note: the SiteInstance returned by this function may not have an
+  // initialized RenderProcessHost. It will only be initialized when
+  // GetProcess() is called on the SiteInstance. In particular, calling this
+  // function will never lead to a process being created for the navigation.
+  scoped_refptr<SiteInstance> GetCandidateSiteInstanceForNavigationRequest(
+      const NavigationRequest& navigation_request);
+
   // Returns the SiteInstance to use for the navigation.
   scoped_refptr<SiteInstance> GetSiteInstanceForNavigation(
       const GURL& dest_url,
diff --git a/content/public/browser/content_browser_client.h b/content/public/browser/content_browser_client.h
index 3be31602689c..2c22cb1cfe0d 100644
--- a/content/public/browser/content_browser_client.h
+++ b/content/public/browser/content_browser_client.h
@@ -196,6 +196,15 @@ class CONTENT_EXPORT ContentBrowserClient {
  public:
   virtual ~ContentBrowserClient() {}

+  // Electron: Allows overriding the SiteInstance when navigating.
+  virtual void OverrideSiteInstanceForNavigation(
+      RenderFrameHost* render_frame_host,
+      BrowserContext* browser_context,
+      const GURL& dest_url,
+      bool has_response_started,
+      SiteInstance* candidate_site_instance,
+      SiteInstance** new_instance) {}
+
   // Allows the embedder to set any number of custom BrowserMainParts
   // implementations for the browser startup code. See comments in
   // browser_main_parts.h.
