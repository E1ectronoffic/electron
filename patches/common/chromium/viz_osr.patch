From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Heilig Benedek <benecene@gmail.com>
Date: Wed, 20 Mar 2019 20:30:44 +0100
Subject: Make OSR work with viz compositor


diff --git a/components/viz/host/host_display_client.cc b/components/viz/host/host_display_client.cc
index bdd1e8bde77ac458639d2b6064c58a133becc5ee..c0f9868fddddac167bbb19af206745c908b95550 100644
--- a/components/viz/host/host_display_client.cc
+++ b/components/viz/host/host_display_client.cc
@@ -18,6 +18,10 @@
 
 namespace viz {
 
+void HostDisplayClient::IsOffscreen(IsOffscreenCallback callback) {
+  std::move(callback).Run(false);
+}
+
 HostDisplayClient::HostDisplayClient(gfx::AcceleratedWidget widget)
     : binding_(this) {
 #if defined(OS_MACOSX) || defined(OS_WIN)
diff --git a/components/viz/host/host_display_client.h b/components/viz/host/host_display_client.h
index 7fd5a4a9a6e1b70c3f07fd7c2c72b380ff6eb4ce..7c1102bc40fbb07a35cedd37ef4485bc8e71fc85 100644
--- a/components/viz/host/host_display_client.h
+++ b/components/viz/host/host_display_client.h
@@ -30,11 +30,13 @@ class VIZ_HOST_EXPORT HostDisplayClient : public mojom::DisplayClient {
   mojom::DisplayClientPtr GetBoundPtr(
       scoped_refptr<base::SingleThreadTaskRunner> task_runner);
 
- private:
+ protected:
   // mojom::DisplayClient implementation:
   void DidSwapAfterSnapshotRequestReceived(
       const std::vector<ui::LatencyInfo>& latency_info) override;
 
+  void IsOffscreen(IsOffscreenCallback callback) override;
+
 #if defined(OS_MACOSX)
   void OnDisplayReceivedCALayerParams(
       const gfx::CALayerParams& ca_layer_params) override;
diff --git a/components/viz/host/layered_window_updater_impl.cc b/components/viz/host/layered_window_updater_impl.cc
index d3a49ed8be8dc11b86af67cdd600b05ddc0fc486..88bf86f3938b8267d731b52c8c3baa35d3128c7a 100644
--- a/components/viz/host/layered_window_updater_impl.cc
+++ b/components/viz/host/layered_window_updater_impl.cc
@@ -47,7 +47,9 @@ void LayeredWindowUpdaterImpl::OnAllocatedSharedMemory(
   shm_handle.Close();
 }
 
-void LayeredWindowUpdaterImpl::Draw(DrawCallback draw_callback) {
+void LayeredWindowUpdaterImpl::Draw(
+    const gfx::Rect& damage_rect,
+    DrawCallback draw_callback) {
   TRACE_EVENT0("viz", "LayeredWindowUpdaterImpl::Draw");
 
   if (!canvas_) {
diff --git a/components/viz/host/layered_window_updater_impl.h b/components/viz/host/layered_window_updater_impl.h
index 93c52d2b928cba6e98723e19b005fb7bd7089a58..4dc645e770a2a039ed8e4ff4de555767fee34a3a 100644
--- a/components/viz/host/layered_window_updater_impl.h
+++ b/components/viz/host/layered_window_updater_impl.h
@@ -33,7 +33,7 @@ class VIZ_HOST_EXPORT LayeredWindowUpdaterImpl
   void OnAllocatedSharedMemory(
       const gfx::Size& pixel_size,
       mojo::ScopedSharedBufferHandle scoped_buffer_handle) override;
-  void Draw(DrawCallback draw_callback) override;
+  void Draw(const gfx::Rect& damage_rect, DrawCallback draw_callback) override;
 
  private:
   const HWND hwnd_;
diff --git a/components/viz/service/BUILD.gn b/components/viz/service/BUILD.gn
index 3ecb373d91b9346c040b7c237adf981f7cc7f390..2bda9eac40aec141c086e8546cbe0b4488a4b332 100644
--- a/components/viz/service/BUILD.gn
+++ b/components/viz/service/BUILD.gn
@@ -111,6 +111,8 @@ viz_component("service") {
     "display_embedder/in_process_gpu_memory_buffer_manager.h",
     "display_embedder/server_shared_bitmap_manager.cc",
     "display_embedder/server_shared_bitmap_manager.h",
+    "display_embedder/software_output_device_proxy.cc",
+    "display_embedder/software_output_device_proxy.h",
     "display_embedder/software_output_surface.cc",
     "display_embedder/software_output_surface.h",
     "display_embedder/viz_process_context_provider.cc",
diff --git a/components/viz/service/display_embedder/gpu_display_provider.cc b/components/viz/service/display_embedder/gpu_display_provider.cc
index 53053fceb49c812d2a231acdd9eca9dd121598c6..5f7533785779b5275add6818dafef6f386084c0b 100644
--- a/components/viz/service/display_embedder/gpu_display_provider.cc
+++ b/components/viz/service/display_embedder/gpu_display_provider.cc
@@ -18,6 +18,7 @@
 #include "components/viz/service/display_embedder/gl_output_surface_offscreen.h"
 #include "components/viz/service/display_embedder/server_shared_bitmap_manager.h"
 #include "components/viz/service/display_embedder/skia_output_surface_impl.h"
+#include "components/viz/service/display_embedder/software_output_device_proxy.h"
 #include "components/viz/service/display_embedder/software_output_surface.h"
 #include "components/viz/service/display_embedder/viz_process_context_provider.h"
 #include "components/viz/service/gl/gpu_service_impl.h"
@@ -244,6 +245,17 @@ GpuDisplayProvider::CreateSoftwareOutputDeviceForPlatform(
   if (headless_)
     return std::make_unique<SoftwareOutputDevice>();
 
+  DCHECK(display_client);
+  bool offscreen = false;
+  if (display_client->IsOffscreen(&offscreen) && offscreen) {
+    mojom::LayeredWindowUpdaterPtr layered_window_updater;
+    display_client->CreateLayeredWindowUpdater(
+        mojo::MakeRequest(&layered_window_updater));
+
+    return std::make_unique<SoftwareOutputDeviceProxy>(
+        std::move(layered_window_updater));
+  }
+
 #if defined(OS_WIN)
   return CreateSoftwareOutputDeviceWinGpu(
       surface_handle, &output_device_backing_, display_client);
diff --git a/components/viz/service/display_embedder/software_output_device_proxy.cc b/components/viz/service/display_embedder/software_output_device_proxy.cc
new file mode 100644
index 0000000000000000000000000000000000000000..56f9ddbba14e121b074e81ba0a29ddbff6007871
--- /dev/null
+++ b/components/viz/service/display_embedder/software_output_device_proxy.cc
@@ -0,0 +1,149 @@
+// Copyright 2014 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "components/viz/service/display_embedder/software_output_device_proxy.h"
+
+#include "base/memory/shared_memory.h"
+#include "base/threading/thread_checker.h"
+#include "base/win/windows_version.h"
+#include "components/viz/common/display/use_layered_window.h"
+#include "components/viz/common/resources/resource_sizes.h"
+#include "components/viz/service/display_embedder/output_device_backing.h"
+#include "mojo/public/cpp/system/platform_handle.h"
+#include "services/viz/privileged/interfaces/compositing/layered_window_updater.mojom.h"
+#include "skia/ext/platform_canvas.h"
+#include "skia/ext/skia_utils_win.h"
+#include "third_party/skia/include/core/SkCanvas.h"
+#include "ui/gfx/gdi_util.h"
+#include "ui/gfx/skia_util.h"
+#include "ui/gfx/win/hwnd_util.h"
+
+namespace viz {
+
+SoftwareOutputDeviceBase::~SoftwareOutputDeviceBase() {
+  DCHECK_CALLED_ON_VALID_THREAD(thread_checker_);
+  DCHECK(!in_paint_);
+}
+
+void SoftwareOutputDeviceBase::Resize(const gfx::Size& viewport_pixel_size,
+                                         float scale_factor) {
+  DCHECK_CALLED_ON_VALID_THREAD(thread_checker_);
+  DCHECK(!in_paint_);
+
+  if (viewport_pixel_size_ == viewport_pixel_size)
+    return;
+
+  viewport_pixel_size_ = viewport_pixel_size;
+  ResizeDelegated();
+}
+
+SkCanvas* SoftwareOutputDeviceBase::BeginPaint(
+    const gfx::Rect& damage_rect) {
+  DCHECK_CALLED_ON_VALID_THREAD(thread_checker_);
+  DCHECK(!in_paint_);
+
+  damage_rect_ = damage_rect;
+  in_paint_ = true;
+  return BeginPaintDelegated();
+}
+
+void SoftwareOutputDeviceBase::EndPaint() {
+  DCHECK_CALLED_ON_VALID_THREAD(thread_checker_);
+  DCHECK(in_paint_);
+
+  in_paint_ = false;
+
+  gfx::Rect intersected_damage_rect = damage_rect_;
+  intersected_damage_rect.Intersect(gfx::Rect(viewport_pixel_size_));
+  if (intersected_damage_rect.IsEmpty())
+    return;
+
+  EndPaintDelegated(intersected_damage_rect);
+}
+
+SoftwareOutputDeviceProxy::~SoftwareOutputDeviceProxy() = default;
+
+SoftwareOutputDeviceProxy::SoftwareOutputDeviceProxy(
+    mojom::LayeredWindowUpdaterPtr layered_window_updater)
+    : layered_window_updater_(std::move(layered_window_updater)) {
+  DCHECK(layered_window_updater_.is_bound());
+}
+
+void SoftwareOutputDeviceProxy::OnSwapBuffers(
+    base::OnceClosure swap_ack_callback) {
+  DCHECK(swap_ack_callback_.is_null());
+
+  // We aren't waiting on DrawAck() and can immediately run the callback.
+  if (!waiting_on_draw_ack_) {
+    task_runner_->PostTask(FROM_HERE, std::move(swap_ack_callback));
+    return;
+  }
+
+  swap_ack_callback_ = std::move(swap_ack_callback);
+}
+
+void SoftwareOutputDeviceProxy::ResizeDelegated() {
+  canvas_.reset();
+
+  size_t required_bytes;
+  if (!ResourceSizes::MaybeSizeInBytes(
+          viewport_pixel_size_, ResourceFormat::RGBA_8888, &required_bytes)) {
+    DLOG(ERROR) << "Invalid viewport size " << viewport_pixel_size_.ToString();
+    return;
+  }
+
+  base::SharedMemory shm;
+  if (!shm.CreateAnonymous(required_bytes)) {
+    DLOG(ERROR) << "Failed to allocate " << required_bytes << " bytes";
+    return;
+  }
+
+  #if defined(WIN32)
+    canvas_ = skia::CreatePlatformCanvasWithSharedSection(
+        viewport_pixel_size_.width(), viewport_pixel_size_.height(), false,
+        shm.handle().GetHandle(), skia::CRASH_ON_FAILURE);
+  #else
+    canvas_ = skia::CreatePlatformCanvasWithPixels(
+        viewport_pixel_size_.width(), viewport_pixel_size_.height(), false,
+        shm.memory(), skia::CRASH_ON_FAILURE);
+  #endif
+
+  // Transfer handle ownership to the browser process.
+  mojo::ScopedSharedBufferHandle scoped_handle = mojo::WrapSharedMemoryHandle(
+      shm.TakeHandle(), required_bytes,
+      mojo::UnwrappedSharedMemoryHandleProtection::kReadWrite);
+
+  layered_window_updater_->OnAllocatedSharedMemory(viewport_pixel_size_,
+                                                   std::move(scoped_handle));
+}
+
+SkCanvas* SoftwareOutputDeviceProxy::BeginPaintDelegated() {
+  return canvas_.get();
+}
+
+void SoftwareOutputDeviceProxy::EndPaintDelegated(
+    const gfx::Rect& damage_rect) {
+  DCHECK(!waiting_on_draw_ack_);
+
+  if (!canvas_)
+    return;
+
+  layered_window_updater_->Draw(damage_rect, base::BindOnce(
+      &SoftwareOutputDeviceProxy::DrawAck, base::Unretained(this)));
+  waiting_on_draw_ack_ = true;
+
+  TRACE_EVENT_ASYNC_BEGIN0("viz", "SoftwareOutputDeviceProxy::Draw", this);
+}
+
+void SoftwareOutputDeviceProxy::DrawAck() {
+  DCHECK(waiting_on_draw_ack_);
+  DCHECK(!swap_ack_callback_.is_null());
+
+  TRACE_EVENT_ASYNC_END0("viz", "SoftwareOutputDeviceProxy::Draw", this);
+
+  waiting_on_draw_ack_ = false;
+  std::move(swap_ack_callback_).Run();
+}
+
+}  // namespace viz
diff --git a/components/viz/service/display_embedder/software_output_device_proxy.h b/components/viz/service/display_embedder/software_output_device_proxy.h
new file mode 100644
index 0000000000000000000000000000000000000000..4d83096cfa38ffb1d17ebe6274d7334704aa6523
--- /dev/null
+++ b/components/viz/service/display_embedder/software_output_device_proxy.h
@@ -0,0 +1,80 @@
+// Copyright 2014 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef COMPONENTS_VIZ_SERVICE_DISPLAY_EMBEDDER_SOFTWARE_OUTPUT_DEVICE_PROXY_H_
+#define COMPONENTS_VIZ_SERVICE_DISPLAY_EMBEDDER_SOFTWARE_OUTPUT_DEVICE_PROXY_H_
+
+#include <windows.h>
+
+#include <memory>
+
+#include "components/viz/service/display/software_output_device.h"
+#include "components/viz/service/viz_service_export.h"
+#include "services/viz/privileged/interfaces/compositing/display_private.mojom.h"
+
+namespace viz {
+
+// Shared base class for SoftwareOutputDevice implementations.
+class SoftwareOutputDeviceBase : public SoftwareOutputDevice {
+ public:
+  SoftwareOutputDeviceBase() = default;
+  ~SoftwareOutputDeviceBase() override;
+
+  // SoftwareOutputDevice implementation.
+  void Resize(const gfx::Size& viewport_pixel_size,
+              float scale_factor) override;
+  SkCanvas* BeginPaint(const gfx::Rect& damage_rect) override;
+  void EndPaint() override;
+
+  // Called from Resize() if |viewport_pixel_size_| has changed.
+  virtual void ResizeDelegated() = 0;
+
+  // Called from BeginPaint() and should return an SkCanvas.
+  virtual SkCanvas* BeginPaintDelegated() = 0;
+
+  // Called from EndPaint() if there is damage.
+  virtual void EndPaintDelegated(const gfx::Rect& damage_rect) = 0;
+
+ private:
+  bool in_paint_ = false;
+
+  THREAD_CHECKER(thread_checker_);
+
+  DISALLOW_COPY_AND_ASSIGN(SoftwareOutputDeviceBase);
+};
+
+// SoftwareOutputDevice implementation that draws indirectly. An implementation
+// of mojom::LayeredWindowUpdater in the browser process handles the actual
+// drawing. Pixel backing is in SharedMemory so no copying between processes
+// is required.
+class SoftwareOutputDeviceProxy : public SoftwareOutputDeviceBase {
+ public:
+  explicit SoftwareOutputDeviceProxy(
+      mojom::LayeredWindowUpdaterPtr layered_window_updater);
+  ~SoftwareOutputDeviceProxy() override;
+
+  // SoftwareOutputDevice implementation.
+  void OnSwapBuffers(base::OnceClosure swap_ack_callback) override;
+
+  // SoftwareOutputDeviceBase implementation.
+  void ResizeDelegated() override;
+  SkCanvas* BeginPaintDelegated() override;
+  void EndPaintDelegated(const gfx::Rect& rect) override;
+
+ private:
+  // Runs |swap_ack_callback_| after draw has happened.
+  void DrawAck();
+
+  mojom::LayeredWindowUpdaterPtr layered_window_updater_;
+
+  std::unique_ptr<SkCanvas> canvas_;
+  bool waiting_on_draw_ack_ = false;
+  base::OnceClosure swap_ack_callback_;
+
+  DISALLOW_COPY_AND_ASSIGN(SoftwareOutputDeviceProxy);
+};
+
+}  // namespace viz
+
+#endif  // COMPONENTS_VIZ_SERVICE_DISPLAY_EMBEDDER_SOFTWARE_OUTPUT_DEVICE_PROXY_H_
diff --git a/components/viz/service/display_embedder/software_output_device_win.cc b/components/viz/service/display_embedder/software_output_device_win.cc
index 740d4edb3cefe2658104b989ed3a12fc7f0796c2..13503f7407a8e8e42293e627e0e1bedca7014d6c 100644
--- a/components/viz/service/display_embedder/software_output_device_win.cc
+++ b/components/viz/service/display_embedder/software_output_device_win.cc
@@ -10,6 +10,7 @@
 #include "components/viz/common/display/use_layered_window.h"
 #include "components/viz/common/resources/resource_sizes.h"
 #include "components/viz/service/display_embedder/output_device_backing.h"
+#include "components/viz/service/display_embedder/software_output_device_proxy.h"
 #include "mojo/public/cpp/system/platform_handle.h"
 #include "services/viz/privileged/interfaces/compositing/layered_window_updater.mojom.h"
 #include "skia/ext/platform_canvas.h"
@@ -23,76 +24,19 @@ namespace viz {
 namespace {
 
 // Shared base class for Windows SoftwareOutputDevice implementations.
-class SoftwareOutputDeviceWinBase : public SoftwareOutputDevice {
+class SoftwareOutputDeviceWinBase : public SoftwareOutputDeviceBase {
  public:
   explicit SoftwareOutputDeviceWinBase(HWND hwnd) : hwnd_(hwnd) {}
-  ~SoftwareOutputDeviceWinBase() override {
-    DCHECK_CALLED_ON_VALID_THREAD(thread_checker_);
-    DCHECK(!in_paint_);
-  }
+  ~SoftwareOutputDeviceWinBase() override = default;
 
   HWND hwnd() const { return hwnd_; }
 
-  // SoftwareOutputDevice implementation.
-  void Resize(const gfx::Size& viewport_pixel_size,
-              float scale_factor) override;
-  SkCanvas* BeginPaint(const gfx::Rect& damage_rect) override;
-  void EndPaint() override;
-
-  // Called from Resize() if |viewport_pixel_size_| has changed.
-  virtual void ResizeDelegated() = 0;
-
-  // Called from BeginPaint() and should return an SkCanvas.
-  virtual SkCanvas* BeginPaintDelegated() = 0;
-
-  // Called from EndPaint() if there is damage.
-  virtual void EndPaintDelegated(const gfx::Rect& damage_rect) = 0;
-
  private:
   const HWND hwnd_;
-  bool in_paint_ = false;
-
-  THREAD_CHECKER(thread_checker_);
 
   DISALLOW_COPY_AND_ASSIGN(SoftwareOutputDeviceWinBase);
 };
 
-void SoftwareOutputDeviceWinBase::Resize(const gfx::Size& viewport_pixel_size,
-                                         float scale_factor) {
-  DCHECK_CALLED_ON_VALID_THREAD(thread_checker_);
-  DCHECK(!in_paint_);
-
-  if (viewport_pixel_size_ == viewport_pixel_size)
-    return;
-
-  viewport_pixel_size_ = viewport_pixel_size;
-  ResizeDelegated();
-}
-
-SkCanvas* SoftwareOutputDeviceWinBase::BeginPaint(
-    const gfx::Rect& damage_rect) {
-  DCHECK_CALLED_ON_VALID_THREAD(thread_checker_);
-  DCHECK(!in_paint_);
-
-  damage_rect_ = damage_rect;
-  in_paint_ = true;
-  return BeginPaintDelegated();
-}
-
-void SoftwareOutputDeviceWinBase::EndPaint() {
-  DCHECK_CALLED_ON_VALID_THREAD(thread_checker_);
-  DCHECK(in_paint_);
-
-  in_paint_ = false;
-
-  gfx::Rect intersected_damage_rect = damage_rect_;
-  intersected_damage_rect.Intersect(gfx::Rect(viewport_pixel_size_));
-  if (intersected_damage_rect.IsEmpty())
-    return;
-
-  EndPaintDelegated(intersected_damage_rect);
-}
-
 // SoftwareOutputDevice implementation that draws directly to the provided HWND.
 // The backing buffer for paint is shared for all instances of this class.
 class SoftwareOutputDeviceWinDirect : public SoftwareOutputDeviceWinBase,
@@ -221,118 +165,6 @@ void SoftwareOutputDeviceWinLayered::EndPaintDelegated(
                       RGB(0xFF, 0xFF, 0xFF), &blend, ULW_ALPHA);
 }
 
-// SoftwareOutputDevice implementation that uses layered window API to draw
-// indirectly. Since UpdateLayeredWindow() is blocked by the GPU sandbox an
-// implementation of mojom::LayeredWindowUpdater in the browser process handles
-// calling UpdateLayeredWindow. Pixel backing is in SharedMemory so no copying
-// between processes is required.
-class SoftwareOutputDeviceWinProxy : public SoftwareOutputDeviceWinBase {
- public:
-  SoftwareOutputDeviceWinProxy(
-      HWND hwnd,
-      mojom::LayeredWindowUpdaterPtr layered_window_updater);
-  ~SoftwareOutputDeviceWinProxy() override = default;
-
-  // SoftwareOutputDevice implementation.
-  void OnSwapBuffers(base::OnceClosure swap_ack_callback) override;
-
-  // SoftwareOutputDeviceWinBase implementation.
-  void ResizeDelegated() override;
-  SkCanvas* BeginPaintDelegated() override;
-  void EndPaintDelegated(const gfx::Rect& rect) override;
-
- private:
-  // Runs |swap_ack_callback_| after draw has happened.
-  void DrawAck();
-
-  mojom::LayeredWindowUpdaterPtr layered_window_updater_;
-
-  std::unique_ptr<SkCanvas> canvas_;
-  bool waiting_on_draw_ack_ = false;
-  base::OnceClosure swap_ack_callback_;
-
-  DISALLOW_COPY_AND_ASSIGN(SoftwareOutputDeviceWinProxy);
-};
-
-SoftwareOutputDeviceWinProxy::SoftwareOutputDeviceWinProxy(
-    HWND hwnd,
-    mojom::LayeredWindowUpdaterPtr layered_window_updater)
-    : SoftwareOutputDeviceWinBase(hwnd),
-      layered_window_updater_(std::move(layered_window_updater)) {
-  DCHECK(layered_window_updater_.is_bound());
-}
-
-void SoftwareOutputDeviceWinProxy::OnSwapBuffers(
-    base::OnceClosure swap_ack_callback) {
-  DCHECK(swap_ack_callback_.is_null());
-
-  // We aren't waiting on DrawAck() and can immediately run the callback.
-  if (!waiting_on_draw_ack_) {
-    task_runner_->PostTask(FROM_HERE, std::move(swap_ack_callback));
-    return;
-  }
-
-  swap_ack_callback_ = std::move(swap_ack_callback);
-}
-
-void SoftwareOutputDeviceWinProxy::ResizeDelegated() {
-  canvas_.reset();
-
-  size_t required_bytes;
-  if (!ResourceSizes::MaybeSizeInBytes(
-          viewport_pixel_size_, ResourceFormat::RGBA_8888, &required_bytes)) {
-    DLOG(ERROR) << "Invalid viewport size " << viewport_pixel_size_.ToString();
-    return;
-  }
-
-  base::SharedMemory shm;
-  if (!shm.CreateAnonymous(required_bytes)) {
-    DLOG(ERROR) << "Failed to allocate " << required_bytes << " bytes";
-    return;
-  }
-
-  // The SkCanvas maps shared memory on creation and unmaps on destruction.
-  canvas_ = skia::CreatePlatformCanvasWithSharedSection(
-      viewport_pixel_size_.width(), viewport_pixel_size_.height(), true,
-      shm.handle().GetHandle(), skia::CRASH_ON_FAILURE);
-
-  // Transfer handle ownership to the browser process.
-  mojo::ScopedSharedBufferHandle scoped_handle = mojo::WrapSharedMemoryHandle(
-      shm.TakeHandle(), required_bytes,
-      mojo::UnwrappedSharedMemoryHandleProtection::kReadWrite);
-
-  layered_window_updater_->OnAllocatedSharedMemory(viewport_pixel_size_,
-                                                   std::move(scoped_handle));
-}
-
-SkCanvas* SoftwareOutputDeviceWinProxy::BeginPaintDelegated() {
-  return canvas_.get();
-}
-
-void SoftwareOutputDeviceWinProxy::EndPaintDelegated(
-    const gfx::Rect& damage_rect) {
-  DCHECK(!waiting_on_draw_ack_);
-
-  if (!canvas_)
-    return;
-
-  layered_window_updater_->Draw(base::BindOnce(
-      &SoftwareOutputDeviceWinProxy::DrawAck, base::Unretained(this)));
-  waiting_on_draw_ack_ = true;
-
-  TRACE_EVENT_ASYNC_BEGIN0("viz", "SoftwareOutputDeviceWinProxy::Draw", this);
-}
-
-void SoftwareOutputDeviceWinProxy::DrawAck() {
-  DCHECK(waiting_on_draw_ack_);
-  DCHECK(!swap_ack_callback_.is_null());
-
-  TRACE_EVENT_ASYNC_END0("viz", "SoftwareOutputDeviceWinProxy::Draw", this);
-
-  waiting_on_draw_ack_ = false;
-  std::move(swap_ack_callback_).Run();
-}
-
 }  // namespace
 
 std::unique_ptr<SoftwareOutputDevice> CreateSoftwareOutputDeviceWinBrowser(
@@ -357,8 +189,8 @@ std::unique_ptr<SoftwareOutputDevice> CreateSoftwareOutputDeviceWinGpu(
     display_client->CreateLayeredWindowUpdater(
         mojo::MakeRequest(&layered_window_updater));
 
-    return std::make_unique<SoftwareOutputDeviceWinProxy>(
-        hwnd, std::move(layered_window_updater));
+    return std::make_unique<SoftwareOutputDeviceProxy>(
+        std::move(layered_window_updater));
   } else {
     return std::make_unique<SoftwareOutputDeviceWinDirect>(hwnd, backing);
   }
diff --git a/services/viz/privileged/interfaces/compositing/display_private.mojom b/services/viz/privileged/interfaces/compositing/display_private.mojom
index b7c138978ae2556a2b7035351e0167c1c3449282..cef272020048c0290d1b68e13a52d75c71faf311 100644
--- a/services/viz/privileged/interfaces/compositing/display_private.mojom
+++ b/services/viz/privileged/interfaces/compositing/display_private.mojom
@@ -58,6 +58,9 @@ interface DisplayClient {
   // component reached the display.
   DidSwapAfterSnapshotRequestReceived(array<ui.mojom.LatencyInfo> latency_info);
 
+  [Sync]
+  IsOffscreen() => (bool success);
+
   [EnableIf=is_mac]
   OnDisplayReceivedCALayerParams(gfx.mojom.CALayerParams ca_layer_params);
 
diff --git a/services/viz/privileged/interfaces/compositing/layered_window_updater.mojom b/services/viz/privileged/interfaces/compositing/layered_window_updater.mojom
index 360cab3eee4c5189a55269d76daa1d78a98ed3d3..6834242f23d27fd6d428c2cd6040206a79d5097b 100644
--- a/services/viz/privileged/interfaces/compositing/layered_window_updater.mojom
+++ b/services/viz/privileged/interfaces/compositing/layered_window_updater.mojom
@@ -22,5 +22,5 @@ interface LayeredWindowUpdater {
   // Draws to the HWND by copying pixels from shared memory. Callback must be
   // called after draw operation is complete to signal shared memory can be
   // modified.
-  Draw() => ();
+  Draw(gfx.mojom.Rect damage_rect) => ();
 };
diff --git a/ui/compositor/compositor.h b/ui/compositor/compositor.h
index 313431f82ee7e181dad2c48dd27950129afbb223..4cd5fb105fa54d89376f495faff7dc07120e12f1 100644
--- a/ui/compositor/compositor.h
+++ b/ui/compositor/compositor.h
@@ -24,6 +24,7 @@
 #include "components/viz/common/frame_sinks/begin_frame_args.h"
 #include "components/viz/common/surfaces/frame_sink_id.h"
 #include "components/viz/common/surfaces/local_surface_id.h"
+#include "components/viz/host/host_display_client.h"
 #include "components/viz/host/host_frame_sink_client.h"
 #include "third_party/skia/include/core/SkColor.h"
 #include "third_party/skia/include/core/SkMatrix44.h"
@@ -193,6 +194,15 @@ class COMPOSITOR_EXPORT ContextFactory {
   virtual bool SyncTokensRequiredForDisplayCompositor() = 0;
 };
 
+class COMPOSITOR_EXPORT CompositorDelegate {
+ public:
+  virtual std::unique_ptr<viz::HostDisplayClient> CreateHostDisplayClient(
+      ui::Compositor* compositor) = 0;
+
+ protected:
+  virtual ~CompositorDelegate() {}
+};
+
 // Compositor object to take care of GPU painting.
 // A Browser compositor object is responsible for generating the final
 // displayable form of pixels comprising a single widget's contents. It draws an
diff --git a/ui/compositor/host/host_context_factory_private.cc b/ui/compositor/host/host_context_factory_private.cc
index 8297e1aabe3b29698a965407e24d1e987be679d3..a78d455e99eb27730b6ac42cd5fd9469caa4a7de 100644
--- a/ui/compositor/host/host_context_factory_private.cc
+++ b/ui/compositor/host/host_context_factory_private.cc
@@ -70,8 +70,12 @@ void HostContextFactoryPrivate::ConfigureCompositor(
       mojo::MakeRequest(&root_params->compositor_frame_sink_client);
   root_params->display_private =
       mojo::MakeRequest(&compositor_data.display_private);
-  compositor_data.display_client =
-      std::make_unique<viz::HostDisplayClient>(compositor->widget());
+  if (compositor->delegate())
+    compositor_data.display_client = compositor->delegate()->CreateHostDisplayClient(
+        compositor);
+  else
+    compositor_data.display_client =
+        std::make_unique<viz::HostDisplayClient>(compositor->widget());
   root_params->display_client =
       compositor_data.display_client->GetBoundPtr(resize_task_runner_)
           .PassInterface();
