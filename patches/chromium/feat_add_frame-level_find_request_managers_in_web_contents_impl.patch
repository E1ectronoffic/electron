From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Raymond Zhao <raymondzhao@microsoft.com>
Date: Thu, 11 Mar 2021 15:43:44 -0800
Subject: feat: Add frame-level find request managers in web_contents_impl

This patch adds the ability to search within a subtree of frames,
rather than from the WebContents representing an entire frame.
This way, Electron apps which require the ability to search only within
a frame can use this feature.

diff --git a/content/browser/find_request_manager.cc b/content/browser/find_request_manager.cc
index 09eb4d6b45669f98ac649b24cd440159f2b043c5..8ab8b69cbb272563f9faa0037be9b8a7e63651bb 100644
--- a/content/browser/find_request_manager.cc
+++ b/content/browser/find_request_manager.cc
@@ -263,7 +263,9 @@ FindRequestManager::FindMatchRectsState::~FindMatchRectsState() = default;
 const int FindRequestManager::kInvalidId = -1;
 
 FindRequestManager::FindRequestManager(WebContentsImpl* web_contents)
-    : contents_(web_contents) {}
+    : contents_(web_contents), root_frame_(nullptr) {}
+FindRequestManager::FindRequestManager(WebContentsImpl* web_contents, RenderFrameHost* rfh)
+    : contents_(web_contents), root_frame_(rfh) {}
 
 FindRequestManager::~FindRequestManager() = default;
 
@@ -286,18 +288,31 @@ void FindRequestManager::Find(int request_id,
 }
 
 void FindRequestManager::StopFinding(StopFindAction action) {
-  for (WebContentsImpl* contents : contents_->GetWebContentsAndAllInner()) {
-    for (FrameTreeNode* node : contents->GetFrameTree()->Nodes()) {
-      RenderFrameHostImpl* rfh = node->current_frame_host();
-      if (!CheckFrame(rfh) || !rfh->IsRenderFrameLive())
+  if (root_frame_) {
+    for (RenderFrameHost* frame: root_frame_->GetFramesInSubtree()) {
+      if (!CheckFrame(frame) || !frame->IsRenderFrameLive())
         continue;
       DCHECK(
-          !static_cast<WebContentsImpl*>(WebContents::FromRenderFrameHost(rfh))
-               ->IsPortal());
-      rfh->GetFindInPage()->StopFinding(
+          !static_cast<WebContentsImpl*>(WebContents::FromRenderFrameHost(frame))
+              ->IsPortal());
+      static_cast<RenderFrameHostImpl*>(frame)->GetFindInPage()->StopFinding(
           static_cast<blink::mojom::StopFindAction>(action));
     }
   }
+  else {
+    for (WebContentsImpl* contents : contents_->GetWebContentsAndAllInner()) {
+      for (FrameTreeNode* node : contents->GetFrameTree()->Nodes()) {
+        RenderFrameHostImpl* frame = node->current_frame_host();
+        if (!CheckFrame(frame) || !frame->IsRenderFrameLive())
+          continue;
+        DCHECK(
+            !static_cast<WebContentsImpl*>(WebContents::FromRenderFrameHost(frame))
+                ->IsPortal());
+        frame->GetFindInPage()->StopFinding(
+            static_cast<blink::mojom::StopFindAction>(action));
+      }
+    }
+  }
 
   current_session_id_ = kInvalidId;
 #if defined(OS_ANDROID)
@@ -413,8 +428,9 @@ void FindRequestManager::RemoveFrame(RenderFrameHost* rfh) {
   // removed, we can target any queued requests to the focused frame or main
   // frame. However, if the main frame is removed we will not have a valid
   // RenderFrameHost to target for the request queue.
-  if (!rfh->GetParent())
+  if (!rfh->GetParent() || rfh == root_frame_) {
     find_request_queue_ = base::queue<FindRequest>();
+  }
 
   // Update the active match ordinal, since it may have changed.
   if (active_frame_ == rfh) {
@@ -596,8 +612,9 @@ void FindRequestManager::FindInternal(const FindRequest& request) {
     // one, or the first frame with matches otherwise.
     RenderFrameHost* target_rfh =
         contents_->GetFocusedWebContents()->GetFocusedFrame();
-    if (!target_rfh || !CheckFrame(target_rfh))
+    if (!target_rfh || !CheckFrame(target_rfh)) {
       target_rfh = GetInitialFrame(request.options->forward);
+    }
 
     SendFindRequest(request, target_rfh);
     current_request_ = request;
@@ -607,6 +624,21 @@ void FindRequestManager::FindInternal(const FindRequest& request) {
 
   // This is an initial find operation.
   Reset(request);
+
+  if (root_frame_) {
+    for (WebContentsImpl* contents : contents_->GetWebContentsAndAllInner()) {
+      if (!contents->IsPortal()) {
+        frame_observers_.push_back(
+            std::make_unique<FrameObserver>(contents, this));
+      }
+    }
+    // We passed in a frame, so just start searching in the frames under it
+    for (RenderFrameHost* frame: root_frame_->GetFramesInSubtree()) {
+      AddFrame(frame, false /* force */);
+    }
+    return;
+  }
+
   for (WebContentsImpl* contents : contents_->GetWebContentsAndAllInner()) {
     // Portals can't receive keyboard events or be focused, so we don't return
     // find results inside a portal.
@@ -621,8 +653,7 @@ void FindRequestManager::FindInternal(const FindRequest& request) {
 }
 
 void FindRequestManager::AdvanceQueue(int request_id) {
-  if (find_request_queue_.empty() ||
-      request_id != find_request_queue_.front().id) {
+  if (find_request_queue_.empty() || find_request_queue_.front().id != request_id) {
     return;
   }
 
@@ -660,11 +691,11 @@ void FindRequestManager::NotifyFindReply(int request_id, bool final_update) {
     last_reported_id_ = request_id;
 
   contents_->NotifyFindReply(request_id, number_of_matches_, selection_rect_,
-                             active_match_ordinal_, final_update);
+                             active_match_ordinal_, final_update, root_frame_);
 }
 
 RenderFrameHost* FindRequestManager::GetInitialFrame(bool forward) const {
-  RenderFrameHost* rfh = contents_->GetMainFrame();
+  RenderFrameHost* rfh = root_frame_ ? root_frame_ : contents_->GetMainFrame();
 
   if (!forward)
     rfh = GetDeepestLastChild(rfh);
diff --git a/content/browser/find_request_manager.h b/content/browser/find_request_manager.h
index 8c85cbbcc39e93ebb751bd6a30aadd09b557a7d1..a059fe6e83ef4b2bf870106558d6b648d574b7a5 100644
--- a/content/browser/find_request_manager.h
+++ b/content/browser/find_request_manager.h
@@ -34,6 +34,8 @@ class WebContentsImpl;
 class CONTENT_EXPORT FindRequestManager {
  public:
   explicit FindRequestManager(WebContentsImpl* web_contents);
+  // Keeps track of searches with |root_frame| as the root frame instead of |web_contents|.
+  explicit FindRequestManager(WebContentsImpl* web_contents, RenderFrameHost* root_frame);
   ~FindRequestManager();
 
   // Initiates a find operation for |search_text| with the options specified in
@@ -272,6 +274,11 @@ class CONTENT_EXPORT FindRequestManager {
   // WebContentses within it will be searched.
   WebContentsImpl* const contents_;
 
+  // The RenderFrameHost that we start and stop the searches from. Only
+  // frames including and under |root_frame_| will be searched if this
+  // parameter is passed in using the constructor.
+  RenderFrameHost* const root_frame_;
+
   // The request ID of the initial find request in the current find-in-page
   // session, which uniquely identifies this session. Request IDs are included
   // in all find-related IPCs, which allows reply IPCs containing results from
diff --git a/content/browser/web_contents/web_contents_impl.cc b/content/browser/web_contents/web_contents_impl.cc
index cefe0bab7ab42c8b0697cb64fc687545251f7410..6c331b7fd20c94b5f38a16128beb4e7d16cdb8be 100644
--- a/content/browser/web_contents/web_contents_impl.cc
+++ b/content/browser/web_contents/web_contents_impl.cc
@@ -941,6 +941,7 @@ WebContentsImpl::~WebContentsImpl() {
 
   color_chooser_.reset();
   find_request_manager_.reset();
+  frame_find_request_managers_.clear();
 
   NotifyDisconnected();
 
@@ -4965,7 +4966,8 @@ int WebContentsImpl::DownloadImageInFrame(
 
 void WebContentsImpl::Find(int request_id,
                            const base::string16& search_text,
-                           blink::mojom::FindOptionsPtr options) {
+                           blink::mojom::FindOptionsPtr options,
+                           RenderFrameHost *rfh) {
   OPTIONAL_TRACE_EVENT0("content", "WebContentsImpl::Find");
   // Cowardly refuse to search for no text.
   if (search_text.empty()) {
@@ -4973,13 +4975,13 @@ void WebContentsImpl::Find(int request_id,
     return;
   }
 
-  GetOrCreateFindRequestManager()->Find(request_id, search_text,
+  GetOrCreateFindRequestManager(rfh)->Find(request_id, search_text,
                                         std::move(options));
 }
 
-void WebContentsImpl::StopFinding(StopFindAction action) {
+void WebContentsImpl::StopFinding(StopFindAction action, RenderFrameHost* rfh) {
   OPTIONAL_TRACE_EVENT0("content", "WebContentsImpl::StopFinding");
-  if (FindRequestManager* manager = GetFindRequestManager())
+  if (FindRequestManager* manager = GetFindRequestManager(rfh))
     manager->StopFinding(action);
 }
 
@@ -7934,7 +7936,12 @@ std::unique_ptr<WebUIImpl> WebContentsImpl::CreateWebUI(
   return nullptr;
 }
 
-FindRequestManager* WebContentsImpl::GetFindRequestManager() {
+FindRequestManager* WebContentsImpl::GetFindRequestManager(RenderFrameHost* root_frame) {
+  if (root_frame) {
+    auto it = frame_find_request_managers_.find(root_frame);
+    return it == frame_find_request_managers_.end() ? nullptr : it->second.get();
+  }
+
   for (auto* contents = this; contents;
        contents = contents->GetOuterWebContents()) {
     if (contents->find_request_manager_)
@@ -7944,14 +7951,20 @@ FindRequestManager* WebContentsImpl::GetFindRequestManager() {
   return nullptr;
 }
 
-FindRequestManager* WebContentsImpl::GetOrCreateFindRequestManager() {
-  if (FindRequestManager* manager = GetFindRequestManager())
+FindRequestManager* WebContentsImpl::GetOrCreateFindRequestManager(RenderFrameHost *root_frame) {
+  if (FindRequestManager* manager = GetFindRequestManager(root_frame))
     return manager;
 
   DCHECK(!browser_plugin_guest_ || GetOuterWebContents());
 
-  // No existing FindRequestManager found, so one must be created.
-  find_request_manager_ = std::make_unique<FindRequestManager>(this);
+  if (root_frame) {
+    // No existing FindRequestManager found, so one must be created.
+    frame_find_request_managers_[root_frame] = std::make_unique<FindRequestManager>(this, root_frame);
+  }
+  else {
+    // No existing FindRequestManager found, so one must be created.
+    find_request_manager_ = std::make_unique<FindRequestManager>(this);
+  }
 
   // Concurrent find sessions must not overlap, so destroy any existing
   // FindRequestManagers in any inner WebContentses.
@@ -7964,20 +7977,38 @@ FindRequestManager* WebContentsImpl::GetOrCreateFindRequestManager() {
           STOP_FIND_ACTION_CLEAR_SELECTION);
       web_contents_impl->find_request_manager_.release();
     }
+    for (auto& it : web_contents_impl->frame_find_request_managers_) {
+      it.second->StopFinding(
+          STOP_FIND_ACTION_CLEAR_SELECTION);
+    }
+    web_contents_impl->frame_find_request_managers_.clear();
+  }
+  for (RenderFrameHost* frame : root_frame->GetFramesInSubtree()) {
+    if (frame == root_frame) {
+      continue;
+    }
+    auto find_request_manager_it = frame_find_request_managers_.find(frame);
+    if (find_request_manager_it != frame_find_request_managers_.end()) {
+      auto* find_request_manager = find_request_manager_it->second.get();
+      find_request_manager->StopFinding(
+          STOP_FIND_ACTION_CLEAR_SELECTION);
+      frame_find_request_managers_.erase(find_request_manager_it);
+    }
   }
 
-  return find_request_manager_.get();
+  return root_frame ? frame_find_request_managers_[root_frame].get() : find_request_manager_.get();
 }
 
 void WebContentsImpl::NotifyFindReply(int request_id,
                                       int number_of_matches,
                                       const gfx::Rect& selection_rect,
                                       int active_match_ordinal,
-                                      bool final_update) {
+                                      bool final_update,
+                                      RenderFrameHost* root_frame) {
   OPTIONAL_TRACE_EVENT0("content", "WebContentsImpl::NotifyFindReply");
   if (delegate_ && !is_being_destroyed_ &&
       !GetMainFrame()->GetProcess()->FastShutdownStarted()) {
-    delegate_->FindReply(this, request_id, number_of_matches, selection_rect,
+    delegate_->FindReply(this, root_frame, request_id, number_of_matches, selection_rect,
                          active_match_ordinal, final_update);
   }
 }
diff --git a/content/browser/web_contents/web_contents_impl.h b/content/browser/web_contents/web_contents_impl.h
index f9fd8ebc471af32ad7158a0054f1b2dc6098026d..e7895ba5c4f6c29945fc24e7878a2ccf12ed50f3 100644
--- a/content/browser/web_contents/web_contents_impl.h
+++ b/content/browser/web_contents/web_contents_impl.h
@@ -512,8 +512,9 @@ class CONTENT_EXPORT WebContentsImpl : public WebContents,
       WebContents::ImageDownloadCallback callback) override;
   void Find(int request_id,
             const base::string16& search_text,
-            blink::mojom::FindOptionsPtr options) override;
-  void StopFinding(StopFindAction action) override;
+            blink::mojom::FindOptionsPtr options,
+            RenderFrameHost* rfh) override;
+  void StopFinding(StopFindAction action, RenderFrameHost* rfh) override;
   bool WasEverAudible() override;
   void GetManifest(GetManifestCallback callback) override;
   bool IsFullscreen() override;
@@ -1071,7 +1072,8 @@ class CONTENT_EXPORT WebContentsImpl : public WebContents,
                        int number_of_matches,
                        const gfx::Rect& selection_rect,
                        int active_match_ordinal,
-                       bool final_update);
+                       bool final_update,
+                       RenderFrameHost* active_frame);
 
   // Modify the counter of connected devices for this WebContents.
   void IncrementBluetoothConnectedDeviceCount();
@@ -1635,13 +1637,13 @@ class CONTENT_EXPORT WebContentsImpl : public WebContents,
       JavaScriptDialogManager* dialog_manager);
 
   // Returns the FindRequestManager, which may be found in an outer WebContents.
-  FindRequestManager* GetFindRequestManager();
+  FindRequestManager* GetFindRequestManager(RenderFrameHost* root_frame = nullptr);
 
   // Returns the FindRequestManager, or tries to create one if it doesn't
   //  already exist. The FindRequestManager may be found in an outer
   // WebContents. If this is an inner WebContents which is not yet attached to
   // an outer WebContents the method will return nullptr.
-  FindRequestManager* GetOrCreateFindRequestManager();
+  FindRequestManager* GetOrCreateFindRequestManager(RenderFrameHost* root_frame = nullptr);
 
   // Removes a registered WebContentsReceiverSet by interface name.
   void RemoveReceiverSet(const std::string& interface_name);
@@ -1756,6 +1758,8 @@ class CONTENT_EXPORT WebContentsImpl : public WebContents,
 
   // Manages/coordinates multi-process find-in-page requests. Created lazily.
   std::unique_ptr<FindRequestManager> find_request_manager_;
+  // Find managers specifically for searching in frames.
+  std::unordered_map<RenderFrameHost*, std::unique_ptr<FindRequestManager>> frame_find_request_managers_;
 
   // Data for loading state ----------------------------------------------------
 
diff --git a/content/public/browser/web_contents.h b/content/public/browser/web_contents.h
index 79af85209da3ca2d6eb7bc27f97e5becad7312e4..2063bc3aedb4892f0c74effcc8bcb4c77e219f56 100644
--- a/content/public/browser/web_contents.h
+++ b/content/public/browser/web_contents.h
@@ -1000,11 +1000,12 @@ class WebContents : public PageNavigator,
   // Finds text on a page. |search_text| should not be empty.
   virtual void Find(int request_id,
                     const base::string16& search_text,
-                    blink::mojom::FindOptionsPtr options) = 0;
+                    blink::mojom::FindOptionsPtr options,
+                    RenderFrameHost* rfh) = 0;
 
   // Notifies the renderer that the user has closed the FindInPage window
   // (and what action to take regarding the selection).
-  virtual void StopFinding(StopFindAction action) = 0;
+  virtual void StopFinding(StopFindAction action, RenderFrameHost* rfh) = 0;
 
   // Returns true if audio has been audible from the WebContents since the last
   // navigation.
diff --git a/content/public/browser/web_contents_delegate.h b/content/public/browser/web_contents_delegate.h
index d19b7ba1cbb686f72ce6989052e5f91d54a086e6..b041e908d0abb410cc603aaf7b293c01d17d0d2a 100644
--- a/content/public/browser/web_contents_delegate.h
+++ b/content/public/browser/web_contents_delegate.h
@@ -489,6 +489,7 @@ class CONTENT_EXPORT WebContentsDelegate {
   // found and the selection rect (in screen coordinates) for the string found.
   // If |final_update| is false, it indicates that more results follow.
   virtual void FindReply(WebContents* web_contents,
+                         RenderFrameHost* root_frame,
                          int request_id,
                          int number_of_matches,
                          const gfx::Rect& selection_rect,
diff --git a/extensions/browser/guest_view/web_view/web_view_find_helper.cc b/extensions/browser/guest_view/web_view/web_view_find_helper.cc
index 95cb7df01c341491adff7c06d6718cdb9c6ec61e..7657f6ec0026f97b01f17d023fa2f31f840b0c10 100644
--- a/extensions/browser/guest_view/web_view/web_view_find_helper.cc
+++ b/extensions/browser/guest_view/web_view/web_view_find_helper.cc
@@ -130,13 +130,13 @@ void WebViewFindHelper::Find(
 
   // Handle the empty |search_text| case internally.
   if (search_text.empty()) {
-    guest_web_contents->StopFinding(content::STOP_FIND_ACTION_CLEAR_SELECTION);
+    guest_web_contents->StopFinding(content::STOP_FIND_ACTION_CLEAR_SELECTION, nullptr);
     FindReply(current_find_request_id_, 0, gfx::Rect(), 0, true);
     return;
   }
 
   guest_web_contents->Find(current_find_request_id_, search_text,
-                           std::move(full_options));
+                           std::move(full_options), nullptr);
 }
 
 void WebViewFindHelper::FindReply(int request_id,
diff --git a/extensions/browser/guest_view/web_view/web_view_guest.cc b/extensions/browser/guest_view/web_view/web_view_guest.cc
index b1a48537daee7ceb5b790b09fa330e0ba12a5ecd..b6d05632779f8cd595e0ab941058e6f910b437b6 100644
--- a/extensions/browser/guest_view/web_view/web_view_guest.cc
+++ b/extensions/browser/guest_view/web_view/web_view_guest.cc
@@ -645,12 +645,13 @@ void WebViewGuest::CloseContents(WebContents* source) {
 }
 
 void WebViewGuest::FindReply(WebContents* source,
+                             RenderFrameHost* active_frame,
                              int request_id,
                              int number_of_matches,
                              const gfx::Rect& selection_rect,
                              int active_match_ordinal,
                              bool final_update) {
-  GuestViewBase::FindReply(source, request_id, number_of_matches,
+  GuestViewBase::FindReply(source, active_frame, request_id, number_of_matches,
                            selection_rect, active_match_ordinal, final_update);
   find_helper_.FindReply(request_id, number_of_matches, selection_rect,
                          active_match_ordinal, final_update);
@@ -766,7 +767,7 @@ void WebViewGuest::StartFind(
 
 void WebViewGuest::StopFinding(content::StopFindAction action) {
   find_helper_.CancelAllFindSessions();
-  web_contents()->StopFinding(action);
+  web_contents()->StopFinding(action, nullptr);
 }
 
 bool WebViewGuest::Go(int relative_index) {
diff --git a/extensions/browser/guest_view/web_view/web_view_guest.h b/extensions/browser/guest_view/web_view/web_view_guest.h
index 83ae752376204a76ff0e213f12505d656bce5480..18226896aeefb0d726aa0f3b3d5d81044d20f374 100644
--- a/extensions/browser/guest_view/web_view/web_view_guest.h
+++ b/extensions/browser/guest_view/web_view/web_view_guest.h
@@ -193,6 +193,7 @@ class WebViewGuest : public guest_view::GuestView<WebViewGuest> {
   void DidInitialize(const base::DictionaryValue& create_params) final;
   void EmbedderFullscreenToggled(bool entered_fullscreen) final;
   void FindReply(content::WebContents* source,
+                 content::RenderFrameHost* active_frame,
                  int request_id,
                  int number_of_matches,
                  const gfx::Rect& selection_rect,
