From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: VerteDinde <keeleymhammond@gmail.com>
Date: Thu, 17 Jun 2021 15:43:39 -0700
Subject: wip: debugging PDF failure to load

This patch is for debugging only and should not be merged. If you
see this in main, something has gone terribly wrong.

diff --git a/pdf/pdf_view_plugin_base.cc b/pdf/pdf_view_plugin_base.cc
index 382adc4968c1d900cdea2c9c76aba226a9027cb5..67af61a16055161be68f16ae0b0d06a29c11a0af 100644
--- a/pdf/pdf_view_plugin_base.cc
+++ b/pdf/pdf_view_plugin_base.cc
@@ -262,6 +262,7 @@ std::unique_ptr<UrlLoader> PdfViewPluginBase::CreateUrlLoader() {
 }
 
 void PdfViewPluginBase::DocumentLoadComplete() {
+  LOG(INFO) << "DOCUMENT LOAD COMPLETE";
   DCHECK_EQ(DocumentLoadState::kLoading, document_load_state_);
   document_load_state_ = DocumentLoadState::kComplete;
 
@@ -279,8 +280,10 @@ void PdfViewPluginBase::DocumentLoadComplete() {
   SendMetadata();
   SendLoadingProgress(/*percentage=*/100);
 
-  if (accessibility_state_ == AccessibilityState::kPending)
+  if (accessibility_state_ == AccessibilityState::kPending) {
+    LOG(INFO) << "PENDING ACCESSIBILITY STATE";
     LoadAccessibility();
+  }
 
   if (!full_frame_)
     return;
@@ -288,6 +291,7 @@ void PdfViewPluginBase::DocumentLoadComplete() {
   DidStopLoading();
 
   int content_restrictions = kContentRestrictionCut | kContentRestrictionPaste;
+  LOG(INFO) << "CONTENT RESTRICTIONS: " << content_restrictions;
   if (!engine()->HasPermission(PDFEngine::PERMISSION_COPY))
     content_restrictions |= kContentRestrictionCopy;
 
@@ -1124,6 +1128,7 @@ void PdfViewPluginBase::SendMetadata() {
   if (!version.empty())
     metadata.SetStringKey("version", version);
 
+  LOG(INFO) << "I think this is failing here (SendMetaData)" << document_metadata.size_bytes;
   metadata.SetStringKey("fileSize",
                         ui::FormatBytes(document_metadata.size_bytes));
 
diff --git a/pdf/pdfium/pdfium_engine.cc b/pdf/pdfium/pdfium_engine.cc
index 20173ec933f5ba068081f7bf6113250a93c1c18d..1542989b918d7188bc945d21d510e08ef1d93e2b 100644
--- a/pdf/pdfium/pdfium_engine.cc
+++ b/pdf/pdfium/pdfium_engine.cc
@@ -2799,6 +2799,7 @@ void PDFiumEngine::ContinueLoadingDocument(const std::string& password) {
     client_->DocumentHasUnsupportedFeature("Bookmarks");
 
   permissions_ = std::make_unique<PDFiumPermissions>(doc());
+  LOG(INFO) << "PERMISSIONS: " << permissions_;
 
   LoadBody();
 
@@ -2918,6 +2919,7 @@ void PDFiumEngine::LoadBody() {
     // If we have only one page we should load form first, because it may be an
     // XFA document. And after loading form the page count and its contents may
     // be changed.
+    LOG(INFO) << "INSIDE LOAD BODY ELSE BLOCK";
     LoadForm();
     if (document_->form_status() == PDF_FORM_NOTAVAIL)
       return;
@@ -2926,6 +2928,7 @@ void PDFiumEngine::LoadBody() {
 }
 
 void PDFiumEngine::LoadPages() {
+  LOG(INFO) << "Are Pages Empty? " << pages_.empty();
   if (pages_.empty()) {
     if (!doc_loader_->IsDocumentComplete()) {
       // Check if the first page is available.  In a linearized PDF, that is not
diff --git a/ui/base/l10n/l10n_util.cc b/ui/base/l10n/l10n_util.cc
index 19a139ad5b15590332890d8bbd5d1f7cde08bdf6..d1000a209c975bc7c0053ab7fadf3890b9c815c5 100644
--- a/ui/base/l10n/l10n_util.cc
+++ b/ui/base/l10n/l10n_util.cc
@@ -813,6 +813,7 @@ std::u16string GetStringFUTF16(int message_id,
   // a StringPiece and were able to call ReplaceStringPlaceholders with
   // a StringPiece format string and std::u16string substitution strings.  In
   // practice, the strings should be relatively short.
+  LOG(INFO) << "Actually failing down here (GetStringFUTF16)";
   ui::ResourceBundle& rb = ui::ResourceBundle::GetSharedInstance();
   const std::u16string& format_string = rb.GetLocalizedString(message_id);
   return FormatString(format_string, replacements, offsets);
diff --git a/ui/base/resource/resource_bundle.cc b/ui/base/resource/resource_bundle.cc
index 65b1649050a15dee206cc2d09b8038f835291576..db896f743e7480d39a320f5bed0dbc374029fb15 100644
--- a/ui/base/resource/resource_bundle.cc
+++ b/ui/base/resource/resource_bundle.cc
@@ -245,6 +245,7 @@ std::string ResourceBundle::InitSharedInstanceWithLocale(
     const std::string& pref_locale,
     Delegate* delegate,
     LoadResources load_resources) {
+  LOG(INFO) << "INIT SHARED INSTANCE WITH LOCALE";
   InitSharedInstance(delegate);
   if (load_resources == LOAD_COMMON_RESOURCES)
     g_shared_instance_->LoadCommonResources();
@@ -259,6 +260,7 @@ std::string ResourceBundle::InitSharedInstanceWithLocale(
 void ResourceBundle::InitSharedInstanceWithPakFileRegion(
     base::File pak_file,
     const base::MemoryMappedFile::Region& region) {
+  LOG(INFO) << "INIT SHARED INSTANCE WITH PAK FILE REGION";
   InitSharedInstance(nullptr);
   auto data_pack = std::make_unique<DataPack>(SCALE_FACTOR_100P);
   if (!data_pack->LoadFromFileRegion(std::move(pak_file), region)) {
@@ -280,6 +282,7 @@ void ResourceBundle::InitSharedInstanceWithPakPath(const base::FilePath& path) {
 
 // static
 void ResourceBundle::CleanupSharedInstance() {
+  LOG(INFO) << "CLEANUP SHARED INSTANCE";
   delete g_shared_instance_;
   g_shared_instance_ = nullptr;
 }
@@ -852,6 +855,7 @@ ResourceBundle::~ResourceBundle() {
 
 // static
 void ResourceBundle::InitSharedInstance(Delegate* delegate) {
+  LOG(INFO) << "INIT SHARED INSTANCE";
   DCHECK(g_shared_instance_ == nullptr) << "ResourceBundle initialized twice";
   g_shared_instance_ = new ResourceBundle(delegate);
   std::vector<ScaleFactor> supported_scale_factors;
