From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Raymond Zhao <raymondzhao@microsoft.com>
Date: Mon, 15 Mar 2021 16:35:25 -0700
Subject: Change find request queue data structure.

This change makes it so that multiple frame searches work
simulatenously within the same webview.

diff --git a/content/browser/find_request_manager.cc b/content/browser/find_request_manager.cc
index b4fcbe0f925f9784c45d3e23b5ff94842e089050..9d37e6c461f2d6dcd72f88b88946bd7a8fa8ce89 100644
--- a/content/browser/find_request_manager.cc
+++ b/content/browser/find_request_manager.cc
@@ -281,26 +281,39 @@ void FindRequestManager::Find(int request_id,
 
   // If this is a new find session, clear any queued requests from last session.
   if (options->new_session)
-    find_request_queue_ = base::queue<FindRequest>();
+    find_request_queues_[rfh] = std::make_unique<base::queue<FindRequest>>();
 
-  find_request_queue_.emplace(request_id, search_text, std::move(options), rfh);
-  if (find_request_queue_.size() == 1)
-    FindInternal(find_request_queue_.front());
+  find_request_queues_[rfh]->emplace(request_id, search_text, std::move(options), rfh);
+  if (find_request_queues_[rfh]->size() == 1)
+    FindInternal(find_request_queues_[rfh]->front());
 }
 
-void FindRequestManager::StopFinding(StopFindAction action) {
-  for (WebContentsImpl* contents : contents_->GetWebContentsAndAllInner()) {
-    for (FrameTreeNode* node : contents->GetFrameTree()->Nodes()) {
-      RenderFrameHostImpl* rfh = node->current_frame_host();
-      if (!CheckFrame(rfh) || !rfh->IsRenderFrameLive())
+void FindRequestManager::StopFinding(StopFindAction action, RenderFrameHost *rfh) {
+  if (rfh) {
+    for (RenderFrameHost* frame: rfh->GetFramesInSubtree()) {
+      if (!CheckFrame(frame) || !frame->IsRenderFrameLive())
         continue;
       DCHECK(
-          !static_cast<WebContentsImpl*>(WebContents::FromRenderFrameHost(rfh))
-               ->IsPortal());
-      rfh->GetFindInPage()->StopFinding(
+          !static_cast<WebContentsImpl*>(WebContents::FromRenderFrameHost(frame))
+              ->IsPortal());
+      static_cast<RenderFrameHostImpl*>(frame)->GetFindInPage()->StopFinding(
           static_cast<blink::mojom::StopFindAction>(action));
     }
   }
+  else {
+    for (WebContentsImpl* contents : contents_->GetWebContentsAndAllInner()) {
+      for (FrameTreeNode* node : contents->GetFrameTree()->Nodes()) {
+        RenderFrameHostImpl* frame = node->current_frame_host();
+        if (!CheckFrame(frame) || !frame->IsRenderFrameLive())
+          continue;
+        DCHECK(
+            !static_cast<WebContentsImpl*>(WebContents::FromRenderFrameHost(frame))
+                ->IsPortal());
+        frame->GetFindInPage()->StopFinding(
+            static_cast<blink::mojom::StopFindAction>(action));
+      }
+    }
+  }
 
   current_session_id_ = kInvalidId;
 #if defined(OS_ANDROID)
@@ -416,8 +429,18 @@ void FindRequestManager::RemoveFrame(RenderFrameHost* rfh) {
   // removed, we can target any queued requests to the focused frame or main
   // frame. However, if the main frame is removed we will not have a valid
   // RenderFrameHost to target for the request queue.
-  if (!rfh->GetParent())
-    find_request_queue_ = base::queue<FindRequest>();
+  if (!rfh->GetParent()) {
+    find_request_queues_[nullptr] = std::make_unique<base::queue<FindRequest>>();
+  }
+  else {
+    for (const auto& pair : find_request_queues_) {
+      RenderFrameHost* root_frame = pair.first;
+      if (root_frame == rfh) {
+        find_request_queues_[rfh] = std::make_unique<base::queue<FindRequest>>();
+        break;
+      }
+    }
+  }
 
   // Update the active match ordinal, since it may have changed.
   if (active_frame_ == rfh) {
@@ -613,6 +636,12 @@ void FindRequestManager::FindInternal(const FindRequest& request) {
   Reset(request);
 
   if (request.search_frame) {
+    for (WebContentsImpl* contents : contents_->GetWebContentsAndAllInner()) {
+      if (!contents->IsPortal()) {
+        frame_observers_.push_back(
+            std::make_unique<FrameObserver>(contents, this));
+      }
+    }
     // We passed in a frame, so just start searching in the frames under it
     for (RenderFrameHost* frame: request.search_frame->GetFramesInSubtree()) {
       AddFrame(frame, false /* force */);
@@ -634,14 +663,22 @@ void FindRequestManager::FindInternal(const FindRequest& request) {
 }
 
 void FindRequestManager::AdvanceQueue(int request_id) {
-  if (find_request_queue_.empty() ||
-      request_id != find_request_queue_.front().id) {
+  // Look for the frame corresponding to the request with id |request_id|.
+  base::queue<FindRequest>* found_queue = nullptr;
+  for (const auto& pair : find_request_queues_) {
+    auto* queue = pair.second.get();
+    if (!queue->empty() && queue->front().id == request_id) {
+      found_queue = queue;
+      break;
+    }
+  }
+  if (!found_queue) {
     return;
   }
 
-  find_request_queue_.pop();
-  if (!find_request_queue_.empty())
-    FindInternal(find_request_queue_.front());
+  found_queue->pop();
+  if (!found_queue->empty())
+    FindInternal(found_queue->front());
 }
 
 void FindRequestManager::SendFindRequest(const FindRequest& request,
diff --git a/content/browser/find_request_manager.h b/content/browser/find_request_manager.h
index a285bb60ae244d5bc04fa6a7c80ec2e809fb3344..3b7ea0c14c8b850ea4b65aae3df06dd407ef39dd 100644
--- a/content/browser/find_request_manager.h
+++ b/content/browser/find_request_manager.h
@@ -38,7 +38,7 @@ class CONTENT_EXPORT FindRequestManager {
 
   // Initiates a find operation for |search_text| with the options specified in
   // |options|. |request_id| uniquely identifies the find request.
-  // If |rfh| is provided, we search just that frame and its subframes,
+  // If |rfh| is provided, searches just that frame and its subframes,
   // rather than the entire web contents.
   void Find(int request_id,
             const base::string16& search_text,
@@ -48,7 +48,9 @@ class CONTENT_EXPORT FindRequestManager {
   // Stops the active find session and clears the general highlighting of the
   // matches. |action| determines whether the last active match (if any) will be
   // activated, cleared, or remain highlighted.
-  void StopFinding(StopFindAction action);
+  // If |rfh| is provided, stops the active find session for only that specific frame,
+  // rather than for frames under the entire webcontents.
+  void StopFinding(StopFindAction action, RenderFrameHost* rfh);
 
   // Handles the final update from |rfh| for the find request with id
   // |request_id|.
@@ -331,7 +333,9 @@ class CONTENT_EXPORT FindRequestManager {
 
   // Find requests are queued here when previous requests need to be handled
   // before these ones can be properly routed.
-  base::queue<FindRequest> find_request_queue_;
+  // It is in the form of a map to allow concurrent searches over multiple frames
+  // The null key is used when
+  std::unordered_map<RenderFrameHost*, std::unique_ptr<base::queue<FindRequest>>> find_request_queues_;
 
   // Keeps track of the find request ID of the last find reply reported via
   // NotifyFindReply().
diff --git a/content/browser/web_contents/web_contents_impl.cc b/content/browser/web_contents/web_contents_impl.cc
index e4c9e8d4decc7339eb3cb552f3675071a4c278fa..66fe2cfbc082393f85cf03cb2d6102fad7e3b164 100644
--- a/content/browser/web_contents/web_contents_impl.cc
+++ b/content/browser/web_contents/web_contents_impl.cc
@@ -4978,10 +4978,10 @@ void WebContentsImpl::Find(int request_id,
                                         std::move(options), rfh);
 }
 
-void WebContentsImpl::StopFinding(StopFindAction action) {
+void WebContentsImpl::StopFinding(StopFindAction action, RenderFrameHost* rfh) {
   OPTIONAL_TRACE_EVENT0("content", "WebContentsImpl::StopFinding");
   if (FindRequestManager* manager = GetFindRequestManager())
-    manager->StopFinding(action);
+    manager->StopFinding(action, rfh);
 }
 
 bool WebContentsImpl::WasEverAudible() {
@@ -7962,7 +7962,7 @@ FindRequestManager* WebContentsImpl::GetOrCreateFindRequestManager() {
       continue;
     if (web_contents_impl->find_request_manager_) {
       web_contents_impl->find_request_manager_->StopFinding(
-          STOP_FIND_ACTION_CLEAR_SELECTION);
+          STOP_FIND_ACTION_CLEAR_SELECTION, nullptr);
       web_contents_impl->find_request_manager_.release();
     }
   }
diff --git a/content/browser/web_contents/web_contents_impl.h b/content/browser/web_contents/web_contents_impl.h
index e67e5ab0fb449b84e81a51f11a5fc000d6228f98..7d57442febf613aafaf0a7b21cbe6e7ff954f888 100644
--- a/content/browser/web_contents/web_contents_impl.h
+++ b/content/browser/web_contents/web_contents_impl.h
@@ -514,7 +514,7 @@ class CONTENT_EXPORT WebContentsImpl : public WebContents,
             const base::string16& search_text,
             blink::mojom::FindOptionsPtr options,
             RenderFrameHost* rfh) override;
-  void StopFinding(StopFindAction action) override;
+  void StopFinding(StopFindAction action, RenderFrameHost* rfh) override;
   bool WasEverAudible() override;
   void GetManifest(GetManifestCallback callback) override;
   bool IsFullscreen() override;
diff --git a/content/public/browser/web_contents.h b/content/public/browser/web_contents.h
index 42aee9ae200a4c2af0eb595e247eb82c03b50c73..2063bc3aedb4892f0c74effcc8bcb4c77e219f56 100644
--- a/content/public/browser/web_contents.h
+++ b/content/public/browser/web_contents.h
@@ -1005,7 +1005,7 @@ class WebContents : public PageNavigator,
 
   // Notifies the renderer that the user has closed the FindInPage window
   // (and what action to take regarding the selection).
-  virtual void StopFinding(StopFindAction action) = 0;
+  virtual void StopFinding(StopFindAction action, RenderFrameHost* rfh) = 0;
 
   // Returns true if audio has been audible from the WebContents since the last
   // navigation.
diff --git a/extensions/browser/guest_view/web_view/web_view_find_helper.cc b/extensions/browser/guest_view/web_view/web_view_find_helper.cc
index 422af49d614ed6d6f09f342939f490a6c61ccaba..7657f6ec0026f97b01f17d023fa2f31f840b0c10 100644
--- a/extensions/browser/guest_view/web_view/web_view_find_helper.cc
+++ b/extensions/browser/guest_view/web_view/web_view_find_helper.cc
@@ -130,7 +130,7 @@ void WebViewFindHelper::Find(
 
   // Handle the empty |search_text| case internally.
   if (search_text.empty()) {
-    guest_web_contents->StopFinding(content::STOP_FIND_ACTION_CLEAR_SELECTION);
+    guest_web_contents->StopFinding(content::STOP_FIND_ACTION_CLEAR_SELECTION, nullptr);
     FindReply(current_find_request_id_, 0, gfx::Rect(), 0, true);
     return;
   }
diff --git a/extensions/browser/guest_view/web_view/web_view_guest.cc b/extensions/browser/guest_view/web_view/web_view_guest.cc
index 4c68cdf3d168265735714bfa48f76fed48830d91..b6d05632779f8cd595e0ab941058e6f910b437b6 100644
--- a/extensions/browser/guest_view/web_view/web_view_guest.cc
+++ b/extensions/browser/guest_view/web_view/web_view_guest.cc
@@ -767,7 +767,7 @@ void WebViewGuest::StartFind(
 
 void WebViewGuest::StopFinding(content::StopFindAction action) {
   find_helper_.CancelAllFindSessions();
-  web_contents()->StopFinding(action);
+  web_contents()->StopFinding(action, nullptr);
 }
 
 bool WebViewGuest::Go(int relative_index) {
