From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Samuel Attard <sattard@slack-corp.com>
Date: Mon, 26 Aug 2019 14:32:41 -0700
Subject: feat: add set_override_should_use_dark_colors to allow apps to
 override chromiums internal theme choice


diff --git a/ui/native_theme/native_theme.cc b/ui/native_theme/native_theme.cc
index 2370d15332c8c6c7dc7e3403b38891c885704d9f..45511a9319b0e02b9b2c115f7d87d82d35743d96 100644
--- a/ui/native_theme/native_theme.cc
+++ b/ui/native_theme/native_theme.cc
@@ -40,6 +40,7 @@ NativeTheme::NativeTheme()
 NativeTheme::~NativeTheme() = default;
 
 bool NativeTheme::ShouldUseDarkColors() const {
+  HANDLE_OVERRIDDEN_SHOULD_USE_DARK_COLORS
   return should_use_dark_colors_;
 }
 
diff --git a/ui/native_theme/native_theme.h b/ui/native_theme/native_theme.h
index 70389e0245993faa2c17e9deefeb000280ef2368..4d56998a391c1c7508bb911eea0c16cdde443a34 100644
--- a/ui/native_theme/native_theme.h
+++ b/ui/native_theme/native_theme.h
@@ -21,6 +21,11 @@
 #include "ui/native_theme/native_theme_export.h"
 #include "ui/native_theme/native_theme_observer.h"
 
+#define HANDLE_OVERRIDDEN_SHOULD_USE_DARK_COLORS \
+  if (override_should_use_dark_colors() == OverrideShouldUseDarkColors::kForceDarkColorsDisabled) return false; \
+  if (override_should_use_dark_colors() == OverrideShouldUseDarkColors::kForceDarkColorsEnabled) return true;
+
+
 namespace gfx {
 class Rect;
 class Size;
@@ -429,6 +434,22 @@ class NATIVE_THEME_EXPORT NativeTheme {
       ColorId color_id,
       ColorScheme color_scheme = ColorScheme::kDefault) const = 0;
 
+  enum OverrideShouldUseDarkColors {
+    kNoOverride,
+    kForceDarkColorsEnabled,
+    kForceDarkColorsDisabled,
+  };
+
+  OverrideShouldUseDarkColors override_should_use_dark_colors() const {
+    return override_should_use_dark_colors_;
+  }
+
+  void set_override_should_use_dark_colors(OverrideShouldUseDarkColors override_should_use_dark_colors) {
+    bool original = ShouldUseDarkColors();
+    override_should_use_dark_colors_ = override_should_use_dark_colors;
+    if (ShouldUseDarkColors() != original) NotifyObservers();
+  }
+
   // Returns a shared instance of the native theme that should be used for web
   // rendering. Do not use it in a normal application context (i.e. browser).
   // The returned object should not be deleted by the caller. This function is
@@ -547,6 +568,8 @@ class NATIVE_THEME_EXPORT NativeTheme {
   PreferredColorScheme preferred_color_scheme_ =
       PreferredColorScheme::kNoPreference;
 
+  OverrideShouldUseDarkColors override_should_use_dark_colors_ = OverrideShouldUseDarkColors::kNoOverride;
+
   DISALLOW_COPY_AND_ASSIGN(NativeTheme);
 };
 
diff --git a/ui/native_theme/native_theme_dark_aura.cc b/ui/native_theme/native_theme_dark_aura.cc
index a8fbfee3b13672902aac05fd5a65fa8ee81f9f7e..58ee87151f40229776ea356eaa6adc30eca389be 100644
--- a/ui/native_theme/native_theme_dark_aura.cc
+++ b/ui/native_theme/native_theme_dark_aura.cc
@@ -20,6 +20,7 @@ SkColor NativeThemeDarkAura::GetSystemColor(ColorId color_id,
 }
 
 bool NativeThemeDarkAura::ShouldUseDarkColors() const {
+  HANDLE_OVERRIDDEN_SHOULD_USE_DARK_COLORS
   return true;
 }
 
diff --git a/ui/native_theme/native_theme_win.cc b/ui/native_theme/native_theme_win.cc
index 3003643bfb78cec2f5e84fc9e1471e1ef54aae41..f305ad3c809129a4b583e3bba04a8734931849b0 100644
--- a/ui/native_theme/native_theme_win.cc
+++ b/ui/native_theme/native_theme_win.cc
@@ -611,6 +611,7 @@ bool NativeThemeWin::ShouldUseDarkColors() const {
   // ...unless --force-dark-mode was specified in which case caveat emptor.
   if (UsesHighContrastColors() && !IsForcedDarkMode())
     return false;
+  HANDLE_OVERRIDDEN_SHOULD_USE_DARK_COLORS
   return NativeTheme::ShouldUseDarkColors();
 }
 
