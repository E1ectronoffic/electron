From 94a8bdafc8c644020b51fabbba4b6ab6a40bb94f Mon Sep 17 00:00:00 2001
From: Keren Zhu <kerenzhu@chromium.org>
Date: Thu, 09 Jun 2022 14:50:26 +0000
Subject: [PATCH] Fix use-after-free vulnerability in ComboboxModel

Stop the Combobox from observing the model when the model gets
destroyed. This is done by adding a virtual OnComboboxModelDestroying()
to the base observer class and calling it in ~ComboboxModel().

This fix will prevent the use-after-free that happens when the combobox outlives the model, usually because the model lifetime
is managed by non-UI component.

Bug: 1264288
Change-Id: Ia00881a9b674bbc83bbf54dd228490c1cc1290bc
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/3693825
Commit-Queue: Keren Zhu <kerenzhu@chromium.org>
Reviewed-by: Matthias Körber <koerber@google.com>
Auto-Submit: Keren Zhu <kerenzhu@chromium.org>
Reviewed-by: Peter Boström <pbos@chromium.org>
Cr-Commit-Position: refs/heads/main@{#1012504}
---

diff --git a/chrome/browser/ui/bookmarks/recently_used_folders_combo_model.cc b/chrome/browser/ui/bookmarks/recently_used_folders_combo_model.cc
index 323f856..0d0bb0d 100644
--- a/chrome/browser/ui/bookmarks/recently_used_folders_combo_model.cc
+++ b/chrome/browser/ui/bookmarks/recently_used_folders_combo_model.cc
@@ -130,16 +130,6 @@
   return it == items_.end() ? 0 : static_cast<int>(it - items_.begin());
 }
 
-void RecentlyUsedFoldersComboModel::AddObserver(
-    ui::ComboboxModelObserver* observer) {
-  observers_.AddObserver(observer);
-}
-
-void RecentlyUsedFoldersComboModel::RemoveObserver(
-    ui::ComboboxModelObserver* observer) {
-  observers_.RemoveObserver(observer);
-}
-
 void RecentlyUsedFoldersComboModel::BookmarkModelLoaded(BookmarkModel* model,
                                                         bool ids_reassigned) {}
 
@@ -176,7 +166,7 @@
     }
   }
   if (changed) {
-    for (ui::ComboboxModelObserver& observer : observers_)
+    for (ui::ComboboxModelObserver& observer : observers())
       observer.OnComboboxModelChanged(this);
   }
 }
@@ -219,7 +209,7 @@
     }
   }
   if (changed) {
-    for (ui::ComboboxModelObserver& observer : observers_)
+    for (ui::ComboboxModelObserver& observer : observers())
       observer.OnComboboxModelChanged(this);
   }
 }
diff --git a/chrome/browser/ui/bookmarks/recently_used_folders_combo_model.h b/chrome/browser/ui/bookmarks/recently_used_folders_combo_model.h
index 8682e75..0c02c68 100644
--- a/chrome/browser/ui/bookmarks/recently_used_folders_combo_model.h
+++ b/chrome/browser/ui/bookmarks/recently_used_folders_combo_model.h
@@ -38,8 +38,6 @@
   std::u16string GetItemAt(int index) const override;
   bool IsItemSeparatorAt(int index) const override;
   int GetDefaultIndex() const override;
-  void AddObserver(ui::ComboboxModelObserver* observer) override;
-  void RemoveObserver(ui::ComboboxModelObserver* observer) override;
 
   // Overriden from bookmarks::BookmarkModelObserver:
   void BookmarkModelLoaded(bookmarks::BookmarkModel* model,
@@ -90,8 +88,6 @@
   const raw_ptr<bookmarks::BookmarkModel> bookmark_model_;
 
   const raw_ptr<const bookmarks::BookmarkNode> parent_node_;
-
-  base::ObserverList<ui::ComboboxModelObserver> observers_;
 };
 
 #endif  // CHROME_BROWSER_UI_BOOKMARKS_RECENTLY_USED_FOLDERS_COMBO_MODEL_H_
diff --git a/chrome/browser/ui/bookmarks/recently_used_folders_combo_model_unittest.cc b/chrome/browser/ui/bookmarks/recently_used_folders_combo_model_unittest.cc
index 60455386..3bfe6852 100644
--- a/chrome/browser/ui/bookmarks/recently_used_folders_combo_model_unittest.cc
+++ b/chrome/browser/ui/bookmarks/recently_used_folders_combo_model_unittest.cc
@@ -41,6 +41,8 @@
     changed_ = true;
   }
 
+  void OnComboboxModelDestroying(ui::ComboboxModel* model) override {}
+
  private:
   bool changed_;
 };
diff --git a/components/autofill/core/browser/ui/address_combobox_model.cc b/components/autofill/core/browser/ui/address_combobox_model.cc
index c7e6f90..d52dc0e 100644
--- a/components/autofill/core/browser/ui/address_combobox_model.cc
+++ b/components/autofill/core/browser/ui/address_combobox_model.cc
@@ -84,14 +84,6 @@
   return ui::ComboboxModel::GetDefaultIndex();
 }
 
-void AddressComboboxModel::AddObserver(ui::ComboboxModelObserver* observer) {
-  observers_.AddObserver(observer);
-}
-
-void AddressComboboxModel::RemoveObserver(ui::ComboboxModelObserver* observer) {
-  observers_.RemoveObserver(observer);
-}
-
 int AddressComboboxModel::AddNewProfile(const AutofillProfile& profile) {
   profiles_cache_.push_back(std::make_unique<AutofillProfile>(profile));
   UpdateAddresses();
@@ -131,7 +123,7 @@
   for (size_t i = 0; i < profiles_cache_.size(); ++i)
     addresses_.emplace_back(profiles_cache_[i]->guid(), labels[i]);
 
-  for (auto& observer : observers_) {
+  for (auto& observer : observers()) {
     observer.OnComboboxModelChanged(this);
   }
 }
diff --git a/components/autofill/core/browser/ui/address_combobox_model.h b/components/autofill/core/browser/ui/address_combobox_model.h
index 02d6520..3a41b30c 100644
--- a/components/autofill/core/browser/ui/address_combobox_model.h
+++ b/components/autofill/core/browser/ui/address_combobox_model.h
@@ -40,8 +40,6 @@
   std::u16string GetItemAt(int index) const override;
   bool IsItemSeparatorAt(int index) const override;
   int GetDefaultIndex() const override;
-  void AddObserver(ui::ComboboxModelObserver* observer) override;
-  void RemoveObserver(ui::ComboboxModelObserver* observer) override;
 
   // Adds |profile| to model and return its combobox index. The lifespan of
   // |profile| beyond this call is undefined so a copy must be made.
@@ -72,9 +70,6 @@
 
   // If non empty, the guid of the address that should be selected by default.
   std::string default_selected_guid_;
-
-  // To be called when the data for the given country code was loaded.
-  base::ObserverList<ui::ComboboxModelObserver> observers_;
 };
 
 }  // namespace autofill
diff --git a/components/autofill/core/browser/ui/region_combobox_model.cc b/components/autofill/core/browser/ui/region_combobox_model.cc
index 6439ccb..42626af 100644
--- a/components/autofill/core/browser/ui/region_combobox_model.cc
+++ b/components/autofill/core/browser/ui/region_combobox_model.cc
@@ -67,14 +67,6 @@
   return regions_[index].first.empty();
 }
 
-void RegionComboboxModel::AddObserver(ui::ComboboxModelObserver* observer) {
-  observers_.AddObserver(observer);
-}
-
-void RegionComboboxModel::RemoveObserver(ui::ComboboxModelObserver* observer) {
-  observers_.RemoveObserver(observer);
-}
-
 void RegionComboboxModel::OnRegionDataLoaded(
     const std::vector<const ::i18n::addressinput::RegionData*>& regions) {
   // The RegionDataLoader will eventually self destruct after this call.
@@ -95,7 +87,7 @@
     failed_to_load_data_ = true;
   }
 
-  for (auto& observer : observers_) {
+  for (auto& observer : observers()) {
     observer.OnComboboxModelChanged(this);
   }
 }
diff --git a/components/autofill/core/browser/ui/region_combobox_model.h b/components/autofill/core/browser/ui/region_combobox_model.h
index d1b5d8b..52cffd5 100644
--- a/components/autofill/core/browser/ui/region_combobox_model.h
+++ b/components/autofill/core/browser/ui/region_combobox_model.h
@@ -54,8 +54,6 @@
   int GetItemCount() const override;
   std::u16string GetItemAt(int index) const override;
   bool IsItemSeparatorAt(int index) const override;
-  void AddObserver(ui::ComboboxModelObserver* observer) override;
-  void RemoveObserver(ui::ComboboxModelObserver* observer) override;
 
  private:
   // Callback for the RegionDataLoader.
@@ -72,9 +70,6 @@
   // List of <code, name> pairs for ADDRESS_HOME_STATE combobox values;
   std::vector<std::pair<std::string, std::string>> regions_;
 
-  // To be called when the data for the given country code was loaded.
-  base::ObserverList<ui::ComboboxModelObserver> observers_;
-
   // Weak pointer factory.
   base::WeakPtrFactory<RegionComboboxModel> weak_factory_{this};
 };
diff --git a/ui/base/models/combobox_model.cc b/ui/base/models/combobox_model.cc
index d307ee0..413adeb 100644
--- a/ui/base/models/combobox_model.cc
+++ b/ui/base/models/combobox_model.cc
@@ -4,10 +4,18 @@
 
 #include "ui/base/models/combobox_model.h"
 
+#include "ui/base/models/combobox_model_observer.h"
 #include "ui/base/models/image_model.h"
 
 namespace ui {
 
+ComboboxModel::ComboboxModel() = default;
+
+ComboboxModel::~ComboboxModel() {
+  for (auto& observer : observers_)
+    observer.OnComboboxModelDestroying(this);
+}
+
 std::u16string ComboboxModel::GetDropDownTextAt(int index) const {
   return GetItemAt(index);
 }
@@ -36,4 +44,12 @@
   return true;
 }
 
+void ComboboxModel::AddObserver(ComboboxModelObserver* observer) {
+  observers_.AddObserver(observer);
+}
+
+void ComboboxModel::RemoveObserver(ComboboxModelObserver* observer) {
+  observers_.RemoveObserver(observer);
+}
+
 }  // namespace ui
diff --git a/ui/base/models/combobox_model.h b/ui/base/models/combobox_model.h
index 5264aaa..eeff7dc 100644
--- a/ui/base/models/combobox_model.h
+++ b/ui/base/models/combobox_model.h
@@ -8,6 +8,7 @@
 #include <string>
 
 #include "base/component_export.h"
+#include "base/observer_list.h"
 
 namespace ui {
 
@@ -17,7 +18,8 @@
 // A data model for a combo box.
 class COMPONENT_EXPORT(UI_BASE) ComboboxModel {
  public:
-  virtual ~ComboboxModel() {}
+  ComboboxModel();
+  virtual ~ComboboxModel();
 
   // Returns the number of items in the combo box.
   virtual int GetItemCount() const = 0;
@@ -52,9 +54,17 @@
   // Returns true if the item at |index| is enabled.
   virtual bool IsItemEnabledAt(int index) const;
 
-  // Adds/removes an observer. Override if model supports mutation.
-  virtual void AddObserver(ComboboxModelObserver* observer) {}
-  virtual void RemoveObserver(ComboboxModelObserver* observer) {}
+  // Adds/removes an observer.
+  void AddObserver(ComboboxModelObserver* observer);
+  void RemoveObserver(ComboboxModelObserver* observer);
+
+ protected:
+  base::ObserverList<ui::ComboboxModelObserver>& observers() {
+    return observers_;
+  }
+
+ private:
+  base::ObserverList<ui::ComboboxModelObserver> observers_;
 };
 
 }  // namespace ui
diff --git a/ui/base/models/combobox_model_observer.h b/ui/base/models/combobox_model_observer.h
index 5e00ab6..44325ff 100644
--- a/ui/base/models/combobox_model_observer.h
+++ b/ui/base/models/combobox_model_observer.h
@@ -16,10 +16,13 @@
 class COMPONENT_EXPORT(UI_BASE) ComboboxModelObserver
     : public base::CheckedObserver {
  public:
-  // Invoked when |model| has changed in some way. The observer should assume
+  // Invoked when `model` has changed in some way. The observer should assume
   // everything changed.
   virtual void OnComboboxModelChanged(ComboboxModel* model) = 0;
 
+  // Invoked when `model` is destroyed. The observer should stop observing.
+  virtual void OnComboboxModelDestroying(ComboboxModel* model) = 0;
+
  protected:
   ~ComboboxModelObserver() override = default;
 };
diff --git a/ui/views/controls/combobox/combobox.cc b/ui/views/controls/combobox/combobox.cc
index aa13525..b8d41cf 100644
--- a/ui/views/controls/combobox/combobox.cc
+++ b/ui/views/controls/combobox/combobox.cc
@@ -578,6 +578,10 @@
   OnContentSizeMaybeChanged();
 }
 
+void Combobox::OnComboboxModelDestroying(ui::ComboboxModel* model) {
+  SetModel(nullptr);
+}
+
 const base::RepeatingClosure& Combobox::GetCallback() const {
   return callback_;
 }
diff --git a/ui/views/controls/combobox/combobox.h b/ui/views/controls/combobox/combobox.h
index fc77f8e..1a3f533 100644
--- a/ui/views/controls/combobox/combobox.h
+++ b/ui/views/controls/combobox/combobox.h
@@ -131,6 +131,7 @@
  protected:
   // Overridden from ComboboxModelObserver:
   void OnComboboxModelChanged(ui::ComboboxModel* model) override;
+  void OnComboboxModelDestroying(ui::ComboboxModel* model) override;
 
   // Getters to be used by metadata.
   const base::RepeatingClosure& GetCallback() const;
diff --git a/ui/views/controls/combobox/combobox_unittest.cc b/ui/views/controls/combobox/combobox_unittest.cc
index 7ce20ac..91661f3 100644
--- a/ui/views/controls/combobox/combobox_unittest.cc
+++ b/ui/views/controls/combobox/combobox_unittest.cc
@@ -84,13 +84,6 @@
     return 0;
   }
 
-  void AddObserver(ui::ComboboxModelObserver* observer) override {
-    observers_.AddObserver(observer);
-  }
-  void RemoveObserver(ui::ComboboxModelObserver* observer) override {
-    observers_.RemoveObserver(observer);
-  }
-
   void SetSeparators(const std::set<int>& separators) {
     separators_ = separators;
     OnModelChanged();
@@ -103,11 +96,10 @@
 
  private:
   void OnModelChanged() {
-    for (auto& observer : observers_)
+    for (auto& observer : observers())
       observer.OnComboboxModelChanged(this);
   }
 
-  base::ObserverList<ui::ComboboxModelObserver> observers_;
   std::set<int> separators_;
   int item_count_ = kItemCount;
 };
@@ -134,20 +126,13 @@
   }
   bool IsItemSeparatorAt(int index) const override { return false; }
   int GetDefaultIndex() const override { return default_index_; }
-  void AddObserver(ui::ComboboxModelObserver* observer) override {
-    observers_.AddObserver(observer);
-  }
-  void RemoveObserver(ui::ComboboxModelObserver* observer) override {
-    observers_.RemoveObserver(observer);
-  }
 
   void ValuesChanged() {
-    for (auto& observer : observers_)
+    for (auto& observer : observers())
       observer.OnComboboxModelChanged(this);
   }
 
  private:
-  base::ObserverList<ui::ComboboxModelObserver> observers_;
   int default_index_ = 0;
   const raw_ptr<std::vector<std::string>> values_;
 };
@@ -884,6 +869,15 @@
   EXPECT_EQ(test_tooltip_text, ASCIIToUTF16(name));
 }
 
+// Regression test for crbug.com/1264288.
+// Should fail in ASan build before the fix.
+TEST_F(ComboboxTest, NoCrashWhenComboboxOutlivesModel) {
+  auto model = std::make_unique<TestComboboxModel>();
+  auto combobox = std::make_unique<TestCombobox>(model.get());
+  model.reset();
+  combobox.reset();
+}
+
 namespace {
 
 using ComboboxDefaultTest = ViewsTestBase;
diff --git a/ui/views/controls/editable_combobox/editable_combobox.cc b/ui/views/controls/editable_combobox/editable_combobox.cc
index b5301bf..faac607f 100644
--- a/ui/views/controls/editable_combobox/editable_combobox.cc
+++ b/ui/views/controls/editable_combobox/editable_combobox.cc
@@ -190,10 +190,15 @@
     return combobox_model_->GetDropDownIconAt(items_shown_[index].index);
   }
 
+  // ComboboxModelObserver:
   void OnComboboxModelChanged(ui::ComboboxModel* model) override {
     UpdateItemsShown();
   }
 
+  void OnComboboxModelDestroying(ui::ComboboxModel* model) override {
+    observation_.Reset();
+  }
+
   int GetItemCount() const override { return items_shown_.size(); }
 
  private:
