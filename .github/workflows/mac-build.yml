name: Build MacOS

on:
  push:
    branches:
      - gh-mac-runner
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: 'Run the build with tmate debugging enabled'
        required: false
        default: false

env:
  GCLIENT_EXTRA_ARGS: '--custom-var=checkout_mac=True --custom-var=host_os=mac --custom-var=host_cpu=arm64'
  IS_RELEASE: false
  AZURE_STORAGE_ACCOUNT: ${{ secrets.AZURE_STORAGE_ACCOUNT }}
  AZURE_STORAGE_KEY: ${{ secrets.AZURE_STORAGE_KEY }}
  AZURE_STORAGE_CONTAINER_NAME: ${{ secrets.AZURE_STORAGE_CONTAINER_NAME }}

jobs:
  checkout:
    runs-on: LargeLinuxRunner
    steps:
    - name: Checkout Electron
      uses: actions/checkout@v4
      with:
        path: src/electron
    - name: Install Azure CLI
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
    - name: Setup Node.js/npm
      uses: actions/setup-node@v3
      with:
        node-version: 18.18.x
        cache: yarn
        cache-dependency-path: src/electron/yarn.lock
    - name: Install Dependencies
      run: |
        cd src/electron
        node script/yarn install
    - name: Get Depot Tools 
      run: |
        git clone --depth=1 https://chromium.googlesource.com/chromium/tools/depot_tools.git
        # TODO: figure out what we need here still
        # if [ "`uname`" == "Darwin" ]; then
        #   # remove ninjalog_uploader_wrapper.py from autoninja since we don't use it and it causes problems
        #   sed -i '' '/ninjalog_uploader_wrapper.py/d' ./depot_tools/autoninja
        # else
        #   sed -i '/ninjalog_uploader_wrapper.py/d' ./depot_tools/autoninja
        #   # Remove swift-format dep from cipd on macOS until we send a patch upstream.
        #   cd depot_tools
        #   cat > gclient.diff \<< 'EOF'
        # diff --git a/gclient.py b/gclient.py
        # index c305c248..e6e0fbdc 100755
        # --- a/gclient.py
        # +++ b/gclient.py
        # @@ -735,7 +735,8 @@ class Dependency(gclient_utils.WorkItem, DependencySettings):
 
        #             if dep_type == 'cipd':
        #                 cipd_root = self.GetCipdRoot()
        # -                for package in dep_value.get('packages', []):
        # +                packages = dep_value.get('packages', [])
        # +                for package in (x for x in packages if "infra/3pp/tools/swift-format" not in x.get('package')):
        #                     deps_to_add.append(
        #                         CipdDependency(parent=self,
        #                                         name=name,
        # EOF
        #   git apply --3way gclient.diff
        # fi
        # Ensure depot_tools does not update.
        test -d depot_tools && cd depot_tools
        touch .disable_auto_update
    - name: Add Depot Tools to PATH
      run: echo "$PWD/depot_tools" >> $GITHUB_PATH
    - name: Generate DEPS Hash
      run: |
        node src/electron/script/generate-deps-hash.js && cat src/electron/.depshash-target
        echo "DEPSHASH=v1-src-cache-$(shasum src/electron/.depshash | cut -f1 -d' ')" >> $GITHUB_ENV
    - name: Check If Cache Exists
      id: check-cache
      run: |
        exists_json=$(az storage blob exists \
          --account-name $AZURE_STORAGE_ACCOUNT \
          --account-key $AZURE_STORAGE_KEY \
          --container-name $AZURE_STORAGE_CONTAINER_NAME \
          --name $DEPSHASH)

        cache_exists=$(echo $exists_json | jq -r '.exists')
        echo "cache_exists=$cache_exists" >> $GITHUB_OUTPUT

        if (test "$cache_exists" = "true"); then
          echo "Cache Exists for $DEPSHASH"
        else
          echo "Cache Does Not Exist for $DEPSHASH"
        fi
    - name: Gclient Sync
      if: steps.check-cache.outputs.cache_exists == 'false'
      run: |
        # If there is no existing src cache, we need to do a full gclient sync
        gclient config \
          --name "src/electron" \
          --unmanaged \
          $GCLIENT_EXTRA_ARGS \
          "$GITHUB_SERVER_URL/$GITHUB_REPOSITORY"

        ELECTRON_USE_THREE_WAY_MERGE_FOR_PATCHES=1 gclient sync --with_branch_heads --with_tags -vvvvv
        if [ "$IS_RELEASE" != "true" ]; then
          # Re-export all the patches to check if there were changes.
          python3 src/electron/script/export_all_patches.py src/electron/patches/config.json
          cd src/electron
          git update-index --refresh || true
          # TODO(vertedinde): Let's not stress on patchup right now, just sync it
          # if ! git diff-index --quiet HEAD --; then
          #   # There are changes to the patches. Make a git commit with the updated patches
          #   git add patches
          #   GIT_COMMITTER_NAME="PatchUp" GIT_COMMITTER_EMAIL="73610968+patchup[bot]@users.noreply.github.com" git commit -m "chore: update patches" --author="PatchUp <73610968+patchup[bot]@users.noreply.github.com>"
          #   # Export it
          #   mkdir -p ../../patches
          #   git format-patch -1 --stdout --keep-subject --no-stat --full-index > ../../patches/update-patches.patch
          #   if (node ./script/push-patch.js 2> /dev/null > /dev/null); then
          #     echo
          #     echo "======================================================================"
          #     echo "Changes to the patches when applying, we have auto-pushed the diff to the current branch"
          #     echo "A new CI job will kick off shortly"
          #     echo "======================================================================"
          #     exit 1
          #   else
          #     echo
          #     echo "======================================================================"
          #     echo "There were changes to the patches when applying."
          #     echo "Check the CI artifacts for a patch you can apply to fix it."
          #     echo "======================================================================"
          #     exit 1
          #   fi
          # fi
        fi
    - name: Minimize Cache Size for Upload
      if: steps.check-cache.outputs.cache_exists == 'false'
      run: |
        rm -rf src/android_webview
        rm -rf src/ios/chrome
        rm -rf src/third_party/blink/web_tests
        rm -rf src/third_party/blink/perf_tests
        rm -rf src/third_party/electron_node/deps/openssl
        rm -rf src/third_party/electron_node/deps/v8
        rm -rf src/chrome/test/data/xr/webvr_info
        rm -rf src/third_party/angle/third_party/VK-GL-CTS/src
        rm -rf src/third_party/swift-toolchain
        rm -rf src/third_party/swiftshader/tests/regres/testlists
    - name: Compress Src Directory
      if: steps.check-cache.outputs.cache_exists == 'false'
      run: |
        zip -r $DEPSHASH.zip src
        echo "Compressed src to $(du -sh $DEPSHASH.zip | cut -f1 -d' ')"
    - name: Upload Compressed Src Cache to Azure
      if: steps.check-cache.outputs.cache_exists == 'false'
      run: |
        az storage blob upload \
          --account-name $AZURE_STORAGE_ACCOUNT \
          --account-key $AZURE_STORAGE_KEY \
          --container-name $AZURE_STORAGE_CONTAINER_NAME \
          --file $DEPSHASH.zip \
          --name $DEPSHASH \
          --debug
  build:
    runs-on: macos-13-xlarge
    needs: checkout
    steps:
    - name: Checkout Electron
      uses: actions/checkout@v4
      with:
        path: src/electron
    - name: Install Azure CLI
      run: |
        brew update && brew install azure-cli
    - name: Setup Node.js/npm
      uses: actions/setup-node@v3
      with:
        node-version: 18.18.x
        cache: yarn
        cache-dependency-path: src/electron/yarn.lock
    - name: Enable ssh Debugging
      uses: mxschmitt/action-tmate@v3
      if: ${{ github.event_name == 'workflow_dispatch' && inputs.debug_enabled }}
      with:
        detached: true
        limit-access-to-actor: true
    - name: Install Dependencies
      run: |
        cd src/electron
        node script/yarn install
    - name: Get Depot Tools 
      run: |
        git clone --depth=1 https://chromium.googlesource.com/chromium/tools/depot_tools.git
        # remove ninjalog_uploader_wrapper.py from autoninja since we don't use it and it causes problems
        sed -i '' '/ninjalog_uploader_wrapper.py/d' ./depot_tools/autoninja
        # Ensure depot_tools does not update.
        test -d depot_tools && cd depot_tools
        touch .disable_auto_update
    - name: Add Depot Tools to PATH
      run: echo "$PWD/depot_tools" >> $GITHUB_PATH
    - name: Generate DEPS Hash
      run: |
        node src/electron/script/generate-deps-hash.js && cat src/electron/.depshash-target
        echo "DEPSHASH=$(shasum src/electron/.depshash | cut -f1 -d' ')" >> $GITHUB_ENV
    - name: Download Src Cache
      run: |
        # The cache will always exist here as a result of the checkout job
        az storage blob download \
          --account-name $AZURE_STORAGE_ACCOUNT \
          --account-key $AZURE_STORAGE_KEY \
          --container-name $AZURE_STORAGE_CONTAINER_NAME \
          --name $DEPSHASH \
          --file $DEPSHASH.zip \
        echo "Downloaded cache is $(du -sh $DEPSHASH.zip | cut -f1)"
    - name: Unzip and Ensure Src Cache
      run: |
        mkdir temp-cache
        unzip -q $DEPSHASH.zip -d temp-cache
        echo "Unzipped cache is $(du -sh temp-cache/src | cut -f1)"

        if [ -d "temp-cache/src" ]; then
          echo "Relocating Cache"
          rm -rf src
          mv temp-cache/src src

          echo "Deleting zip file"
          rm -rf $DEPSHASH.zip
        fi

        if [ ! -d "src/third_party/blink" ]; then
          echo "Cache was not correctly restored - exiting"
          exit 1
        fi

        echo "Wiping Electron Directory"
        rm -rf src/electron
    - name: Checkout Electron
      uses: actions/checkout@v4
      with:
        path: src/electron
    - name: Run Electron Only Hooks
      run: |
        echo "Running Electron Only Hooks"
        gclient runhooks --spec="solutions=[{'name':'src/electron','url':None,'deps_file':'DEPS','custom_vars':{'process_deps':False},'managed':False}]"
    - name: Regenerate DEPS Hash
      run: |
        (cd src/electron && git checkout .) && node src/electron/script/generate-deps-hash.js && cat src/electron/.depshash-target
        echo "DEPSHASH=$(shasum src/electron/.depshash | cut -f1 -d' ')" >> $GITHUB_ENV
    - name: Fix Sync
      run : |
        echo "TODO: Fix Sync" 
