
returns "None" path, the whole script fails. Let's "fix" it.
          touch .gclient
          # Another option would be to checkout "buildtools" inside the Electron checkout,
          # but then we would lint its contents (at least gn format), and it doesn't pass it.

          cd src/electron
          npm install
          npm run lint

steps-checkout: &steps-checkout
  steps:
    - *step-checkout-electron
    - *step-depot-tools-get
    - *step-depot-tools-add-to-path
    - *step-restore-brew-cache
    - *step-get-more-space-on-mac
    - *step-install-gnutar-on-mac

    - run:
        name: Generate DEPS Hash
        command: node src/electron/script/generate-deps-hash.js
    - run:
        name: Touch Sync Done
        command: touch src/electron/.circle-sync-done
    # Restore exact src cache based on the hash of DEPS and patches/*
    # If no cache is matched EXACTLY then the .circle-sync-done file is empty
    # If a cache is matched EXACTLY then the .circle-sync-done file contains "done"
    - restore_cache:
        paths:
          - ./src
        keys:
          - v5-src-cache-{{ arch }}-{{ checksum "src/electron/.depshash" }}
        name: Restoring src cache
    # Restore exact or closest git cache based on the hash of DEPS and .circle-sync-done
    # If the src cache was restored above then this will match an empty cache
    # If the src cache was not restored above then this will match a close git cache
    - restore_cache:
        paths:
          - ~/.gclient-cache
        keys:
          - v2-gclient-cache-{{ arch }}-{{ checksum "src/electron/.circle-sync-done" }}-{{ checksum "src/electron/DEPS" }}
          - v2-gclient-cache-{{ arch }}-{{ checksum "src/electron/.circle-sync-done" }}
        name: Conditionally restoring git cache
    - run:
        name: Set GIT_CACHE_PATH to make gclient to use the cache
        command: |
          # CircleCI does not support interpolation when setting environment variables.
          # https://circleci.com/docs/2.0/env-vars/#setting-an-environment-variable-in-a-shell-command
          echo 'export GIT_CACHE_PATH="$HOME/.gclient-cache"' >> $BASH_ENV
    # This sync call only runs if .circle-sync-done is an EMPTY file
    - *step-gclient-sync
    # Persist the git cache based on the hash of DEPS and .circle-sync-done
    # If the src cache was restored above then this will persist an empty cache
    - save_cache:
        paths:
          - ~/.gclient-cache
        key: v2-gclient-cache-{{ arch }}-{{ checksum "src/electron/.circle-sync-done" }}-{{ checksum "src/electron/DEPS" }}
        name: Persisting git cache
    # These next few steps reset Electron to the correct commit regardless of which cache was restored
    - run:
        name: Wipe Electron
        command: rm -rf src/electron
    - *step-checkout-electron
    - run:
        name: Run Electron Only Hooks
        command: gclient runhooks --spec="solutions=[{'name':'src/electron','url':None,'deps_file':'DEPS','custom_vars':{'process_deps':False},'managed':False}]"
    - run:
        name: Generate DEPS Hash
        command: (cd src/electron && git checkout .) && node src/electron/script/generate-deps-hash.js
    # Mark the sync as done for future cache saving
    - run:
        name: Mark Sync Done
        command: echo DONE > src/electron/.circle-sync-done
    # Minimize the size of the cache
    - run:
        name: Remove some unused data to avoid storing it in the workspace/cache
        command: |
          rm -rf src/android_webview
          rm -rf src/ios
          rm -rf src/third_party/blink/web_tests
          rm -rf src/third_party/blink/perf_tests
          rm -rf src/third_party/hunspell_dictionaries
          rm -rf src/third_party/WebKit/LayoutTests
    # Save the src cache based on the deps hash
    - save_cache:
        paths:
          - ./src
        key: v5-src-cache-{{ arch }}-{{ checksum "src/electron/.depshash" }}
        name: Persisting src cache
    - save_cache:
        paths:
          - /usr/local/Homebrew
        key: v1-brew-cache-{{ arch }}
        name: Persisting brew cache
    - persist_to_workspace:
        root: .
        paths:
          - depot_tools
          - src

steps-electron-gn-check: &steps-electron-gn-check
  steps:
    - attach_workspace:
        at: .
    - *step-depot-tools-add-to-path
    - *step-setup-env-for-build
    - *step-gn-gen-default
    - *step-gn-check

steps-electron-build: &steps-electron-build
  steps:
    - attach_workspace:
        at: .
    - *step-depot-tools-add-to-path
    - *step-setup-env-for-build
    - *step-gn-gen-default

    # Electron app
    - *step-electron-build
    - *step-electron-dist-build
    - *step-electron-dist-store

    # Node.js headers
    - *step-nodejs-headers-build
    - *step-nodejs-headers-store

    - *step-show-sccache-stats

steps-electron-build-for-tests: &steps-electron-build-for-tests
  steps:
    - attach_workspace:
        at: .
    - *step-depot-tools-add-to-path
    - *step-setup-env-for-build
    - *step-restore-brew-cache
    - *step-install-npm-deps-on-mac
    - *step-fix-sync-on-mac
    - *step-gn-gen-default

    # Electron app
    - *step-electron-build
    - *step-maybe-electron-dist-strip
    - *step-electron-dist-build
    - *step-electron-dist-store

    # Node.js headers
    - *step-nodejs-headers-build
    - *step-nodejs-headers-store

    - *step-show-sccache-stats

    # mksnapshot
    - *step-mksnapshot-build
    - *step-mksnapshot-store
    - *step-maybe-cross-arch-snapshot
    - *step-maybe-cross-arch-snapshot-store

    # ffmpeg
    - *step-ffmpeg-gn-gen
    - *step-ffmpeg-build
    - *step-ffmpeg-store

    # Save all data needed for a further tests run.
    - *step-persist-data-for-tests

    - *step-maybe-build-dump-syms
    - *step-maybe-generate-breakpad-symbols
    - *step-maybe-zip-symbols

    # Trigger tests on arm hardware if needed
    - *step-maybe-trigger-arm-test

    - *step-maybe-notify-slack-failure

steps-electron-build-for-publish: &steps-electron-build-for-publish
  steps:
    - *step-checkout-electron
    - *step-depot-tools-get
    - *step-depot-tools-add-to-path
    - *step-restore-brew-cache
    - *step-get-more-space-on-mac
    - *step-gclient-sync
    - *step-setup-env-for-build
    - *step-gn-gen-default
    - *step-delete-git-directories

    # Electron app
    - *step-electron-build
    - *step-maybe-electron-dist-strip
    - *step-electron-dist-build
    - *step-electron-dist-store
    - *step-maybe-build-dump-syms
    - *step-maybe-generate-breakpad-symbols
    - *step-maybe-zip-symbols

    # mksnapshot
    - *step-mksnapshot-build
    - *step-mksnapshot-store

    # chromedriver
    - *step-electron-chromedriver-build
    - *step-electron-chromedriver-store

    # Node.js headers
    - *step-nodejs-headers-build
    - *step-nodejs-headers-store

    # ffmpeg
    - *step-ffmpeg-gn-gen
    - *step-ffmpeg-build
    - *step-ffmpeg-store

    # typescript defs
    - *step-maybe-generate-typescript-defs

    # Publish
    - *step-electron-publish

steps-chromedriver-build: &steps-chromedriver-build
  steps:
    - attach_workspace:
        at: .
    - *step-depot-tools-add-to-path
    - *step-setup-env-for-build
    - *step-fix-sync-on-mac
    - *step-gn-gen-default

    - *step-electron-chromedriver-build
    - *step-electron-chromedriver-store

    - *step-maybe-notify-slack-failure

steps-native-tests: &steps-native-tests
  steps:
    - attach_workspace:
        at: .
    - *step-depot-tools-add-to-path
    - *step-setup-env-for-build
    - *step-gn-gen-default

    - run:
        name: Build tests
        command: |
          cd src
          ninja -C out/Default $BUILD_TARGET
    - *step-show-sccache-stats

    - *step-setup-linux-for-headless-testing
    - run:
        name: Run tests
        command: |
          mkdir test_results
          python src/electron/script/native-tests.py run \
            --config $TESTS_CONFIG \
            --tests-dir src/out/Default \
            --output-dir test_results  \
            $TESTS_ARGS

    - store_artifacts:
        path: test_results
        destination: test_results  # Put it in the root folder.
    - store_test_results:
        path: test_results

steps-verify-ffmpeg: &steps-verify-ffmpeg
  steps:
    - attach_workspace:
        at: .
    - *step-depot-tools-add-to-path
    - *step-electron-dist-unzip
    - *step-ffmpeg-unzip
    - *step-setup-linux-for-headless-testing

    - *step-verify-ffmpeg
    - *step-maybe-notify-slack-failure

steps-verify-mksnapshot: &steps-verify-mksnapshot
  steps:
    - attach_workspace:
        at: .
    - *step-depot-tools-add-to-path
    - *step-electron-dist-unzip
    - *step-mksnapshot-unzip
    - *step-setup-linux-for-headless-testing

    - *step-verify-mksnapshot
    - *step-maybe-notify-slack-failure

steps-tests: &steps-tests
  steps:
    - attach_workspace:
        at: .
    - *step-depot-tools-add-to-path
    - *step-electron-dist-unzip
    - *step-mksnapshot-unzip
    - *step-setup-linux-for-headless-testing
    - *step-restore-brew-cache
    - *step-fix-known-hosts-linux
    - *step-install-signing-cert-on-mac

    - run:
        name: Run Electron tests
        environment:
          MOCHA_REPORTER: mocha-multi-reporters
          MOCHA_FILE: junit/test-results.xml
          MOCHA_MULTI_REPORTERS: mocha-junit-reporter, tap
          ELECTRON_DISABLE_SECURITY_WARNINGS: 1
        command: |
          cd src
          export ELECTRON_OUT_DIR=Default
          (cd electron && npm run test -- --ci --enable-logging)
    - run:
        name: Check test results existence
        command: |
          MOCHA_FILE='src/junit/test-results-remote.xml'
          # Check if it exists and not empty.
          if [ ! -s "$MOCHA_FILE" ]; then
            exit 1
          fi

          MOCHA_FILE='src/junit/test-results-main.xml'
          # Check if it exists and not empty.
          if [ ! -s "$MOCHA_FILE" ]; then
            exit 1
          fi
    - store_test_results:
        path: src/junit

    - *step-verify-mksnapshot

    - *step-maybe-notify-slack-failure

chromium-upgrade-branches: &chromium-upgrade-branches
  /chromium\-upgrade\/[0-9]+/

# ListGCLIENT_EXTRA_ARGS: '--custom-var=checkout_arm=True --custom-var=checkout_arm64=True'
    <<: *steps-checkout

  linux-checkout-for-native-tests:
    <<: *machine-linux-2xlarge
    environment:
      <<: *env-linux-2xlarge
      GCLIENT_EXTRA_ARGS: '--custom-var=checkout_pyyaml=True'
    <<: *steps-checkout

  linux-checkout-for-native-tests-with-no-patches:
    <<: *machine-linux-2xlarge
    environment:
      <<: *env-linux-2xlarge
      GCLIENT_EXTRA_ARGS: '--custom-var=apply_patches=False --custom-var=checkout_pyyaml=True'
    <<: *steps-checkout

  mac-checkout:
    <<: *machine-linux-2xlarge
    environment:
      <<: *env-linux-2xlarge
      GCLIENT_EXTRA_ARGS: '--custom-var=checkout_mac=True --custom-var=host_os=mac'
    <<: *steps-checkout

  # Layer 2: Builds.
  linux-x64-debug:
    <<: *machine-linux-2xlarge
    environment:
      <<: *env-linux-2xlarge
      <<: *env-debug-build
      <<: *env-enable-sccache
    <<: *steps-electron-build

  linux-x64-debug-gn-check:
    <<: *machine-linux-medium
    environment:
      <<: *env-linux-medium
      <<: *env-debug-build
    <<: *steps-electron-gn-check

  linux-x64-testing:
    <<: *machine-linux-2xlarge
    environment:
      <<: *env-linux-2xlarge
      <<: *env-testing-build
      <<: *env-enable-sccache
    <<: *steps-electron-build-for-tests

  linux-x64-testing-gn-check:
    <<: *machine-linux-medium
    environment:
      <<: *env-linux-medium
      <<: *env-testing-build
    <<: *steps-electron-gn-check

  linux-x64-chromedriver:
    <<: *machine-linux-medium
    environment:
      <<: *env-linux-medium
      <<: *env-release-build
      <<: *env-enable-sccache
      <<: *env-send-slack-notifications
    <<: *steps-chromedriver-build

  linux-x64-release:
    <<: *machine-linux-2xlarge
    environment:
      <<: *env-linux-2xlarge
      <<: *env-release-build
      <<: *env-enable-sccache
      <<: *env-send-slack-notifications
    <<: *steps-electron-build-for-tests

  linux-x64-publish:
    <<: *machine-linux-2xlarge
    environment:
      <<: *env-linux-2xlarge
      GCLIENT_EXTRA_ARGS: '--custom-var=checkout_boto=True --custom-var=checkout_requests=True'
      <<: *env-release-build
    <<: *steps-electron-build-for-publish

  linux-ia32-debug:
    <<: *machine-linux-2xlarge
    environment:
      <<: *env-linux-2xlarge
      <<: *env-ia32
      <<: *env-debug-build
      <<: *env-enable-sccache
    <<: *steps-electron-build

  linux-ia32-testing:
    <<: *machine-linux-2xlarge
    environment:
      <<: *env-linux-2xlarge
      <<: *env-ia32
      <<: *env-testing-build
      <<: *env-enable-sccache
    <<: *steps-electron-build-for-tests

  linux-ia32-chromedriver:
    <<: *machine-linux-medium
    environment:
      <<: *env-linux-medium
      <<: *env-ia32
      <<: *env-release-build
      <<: *env-enable-sccache
      <<: *env-send-slack-notifications
    <<: *steps-chromedriver-build

  linux-ia32-release:
    <<: *machine-linux-2xlarge
    environment:
      <<: *env-linux-2xlarge
      <<: *env-ia32
      <<: *env-release-build
      <<: *env-enable-sccache
      <<: *env-send-slack-notifications
    <<: *steps-electron-build-for-tests

  linux-ia32-publish:
    <<: *machine-linux-2xlarge
    environment:
      <<: *env-linux-2xlarge
      GCLIENT_EXTRA_ARGS: '--custom-var=checkout_boto=True --custom-var=checkout_requests=True'
      <<: *env-ia32
      <<: *env-release-build
    <<: *steps-electron-build-for-publish

  linux-arm-debug:
    <<: *machine-linux-2xlarge
    environment:
      <<: *env-linux-2xlarge
      <<: *env-arm
      <<: *env-debug-build
      <<: *env-enable-sccache
    <<: *steps-electron-build

  linux-arm-testing:
    <<: *machine-linux-2xlarge
    environment:
      <<: *env-linux-2xlarge
      <<: *env-arm
      <<: *env-testing-build
      <<: *env-enable-sccache
      TRIGGER_ARM_TEST: true
    <<: *steps-electron-build-for-tests

  linux-arm-chromedriver:
    <<: *machine-linux-medium
    environment:
      <<: *env-linux-medium
      <<: *env-arm
      <<: *env-release-build
